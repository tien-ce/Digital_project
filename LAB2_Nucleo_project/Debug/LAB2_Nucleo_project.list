
LAB2_Nucleo_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004680  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b8  080047b8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080047b8  080047b8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047b8  080047b8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047bc  080047bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080047c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000088  08004848  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08004848  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e62d  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ed  00000000  00000000  0002e6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000308d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00031648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000225b  00000000  00000000  000322c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c9f  00000000  00000000  0003451b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b514  00000000  00000000  000451ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d06ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000379c  00000000  00000000  000d0724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08004774 	.word	0x08004774

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08004774 	.word	0x08004774

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc40 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8c4 	bl	80002e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f876 	bl	800024c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000160:	f000 f846 	bl	80001f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <main+0x28>)
 8000166:	f003 fafb 	bl	8003760 <HAL_TIM_Base_Start_IT>
	two_way_traffic_init();
 800016a:	f000 fab1 	bl	80006d0 <two_way_traffic_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  two_way_traffic_run();
 800016e:	f000 fae5 	bl	800073c <two_way_traffic_run>
 8000172:	e7fc      	b.n	800016e <main+0x22>
 8000174:	20000110 	.word	0x20000110

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b090      	sub	sp, #64	; 0x40
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0318 	add.w	r3, r7, #24
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f004 faec 	bl	8004764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019a:	2302      	movs	r3, #2
 800019c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019e:	2301      	movs	r3, #1
 80001a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a2:	2310      	movs	r3, #16
 80001a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001a6:	2300      	movs	r3, #0
 80001a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 fe8c 	bl	8002ecc <HAL_RCC_OscConfig>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ba:	f000 f941 	bl	8000440 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001be:	230f      	movs	r3, #15
 80001c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001c2:	2300      	movs	r3, #0
 80001c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2100      	movs	r1, #0
 80001d8:	4618      	mov	r0, r3
 80001da:	f003 f8f7 	bl	80033cc <HAL_RCC_ClockConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80001e4:	f000 f92c 	bl	8000440 <Error_Handler>
  }
}
 80001e8:	bf00      	nop
 80001ea:	3740      	adds	r7, #64	; 0x40
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001f4:	4b12      	ldr	r3, [pc, #72]	; (8000240 <MX_I2C1_Init+0x50>)
 80001f6:	4a13      	ldr	r2, [pc, #76]	; (8000244 <MX_I2C1_Init+0x54>)
 80001f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001fa:	4b11      	ldr	r3, [pc, #68]	; (8000240 <MX_I2C1_Init+0x50>)
 80001fc:	4a12      	ldr	r2, [pc, #72]	; (8000248 <MX_I2C1_Init+0x58>)
 80001fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000200:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <MX_I2C1_Init+0x50>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000206:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <MX_I2C1_Init+0x50>)
 8000208:	2200      	movs	r2, #0
 800020a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800020c:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <MX_I2C1_Init+0x50>)
 800020e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000212:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <MX_I2C1_Init+0x50>)
 8000216:	2200      	movs	r2, #0
 8000218:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <MX_I2C1_Init+0x50>)
 800021c:	2200      	movs	r2, #0
 800021e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <MX_I2C1_Init+0x50>)
 8000222:	2200      	movs	r2, #0
 8000224:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <MX_I2C1_Init+0x50>)
 8000228:	2200      	movs	r2, #0
 800022a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <MX_I2C1_Init+0x50>)
 800022e:	f000 ff7b 	bl	8001128 <HAL_I2C_Init>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000238:	f000 f902 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	200000bc 	.word	0x200000bc
 8000244:	40005400 	.word	0x40005400
 8000248:	000186a0 	.word	0x000186a0

0800024c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000252:	f107 0308 	add.w	r3, r7, #8
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_TIM2_Init+0x94>)
 800026a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <MX_TIM2_Init+0x94>)
 8000272:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000276:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000278:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_TIM2_Init+0x94>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <MX_TIM2_Init+0x94>)
 8000280:	2209      	movs	r2, #9
 8000282:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <MX_TIM2_Init+0x94>)
 8000286:	2200      	movs	r2, #0
 8000288:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_TIM2_Init+0x94>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000290:	4813      	ldr	r0, [pc, #76]	; (80002e0 <MX_TIM2_Init+0x94>)
 8000292:	f003 fa15 	bl	80036c0 <HAL_TIM_Base_Init>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800029c:	f000 f8d0 	bl	8000440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002a6:	f107 0308 	add.w	r3, r7, #8
 80002aa:	4619      	mov	r1, r3
 80002ac:	480c      	ldr	r0, [pc, #48]	; (80002e0 <MX_TIM2_Init+0x94>)
 80002ae:	f003 fb99 	bl	80039e4 <HAL_TIM_ConfigClockSource>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002b8:	f000 f8c2 	bl	8000440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002bc:	2300      	movs	r3, #0
 80002be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002c4:	463b      	mov	r3, r7
 80002c6:	4619      	mov	r1, r3
 80002c8:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_TIM2_Init+0x94>)
 80002ca:	f003 fd7b 	bl	8003dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002d4:	f000 f8b4 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002d8:	bf00      	nop
 80002da:	3718      	adds	r7, #24
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000110 	.word	0x20000110

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b44      	ldr	r3, [pc, #272]	; (800040c <MX_GPIO_Init+0x128>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a43      	ldr	r2, [pc, #268]	; (800040c <MX_GPIO_Init+0x128>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b41      	ldr	r3, [pc, #260]	; (800040c <MX_GPIO_Init+0x128>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b3e      	ldr	r3, [pc, #248]	; (800040c <MX_GPIO_Init+0x128>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a3d      	ldr	r2, [pc, #244]	; (800040c <MX_GPIO_Init+0x128>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b3b      	ldr	r3, [pc, #236]	; (800040c <MX_GPIO_Init+0x128>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b38      	ldr	r3, [pc, #224]	; (800040c <MX_GPIO_Init+0x128>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a37      	ldr	r2, [pc, #220]	; (800040c <MX_GPIO_Init+0x128>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b35      	ldr	r3, [pc, #212]	; (800040c <MX_GPIO_Init+0x128>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b32      	ldr	r3, [pc, #200]	; (800040c <MX_GPIO_Init+0x128>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a31      	ldr	r2, [pc, #196]	; (800040c <MX_GPIO_Init+0x128>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b2f      	ldr	r3, [pc, #188]	; (800040c <MX_GPIO_Init+0x128>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, B4_Pin|A3_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2182      	movs	r1, #130	; 0x82
 800035c:	482c      	ldr	r0, [pc, #176]	; (8000410 <MX_GPIO_Init+0x12c>)
 800035e:	f000 feca 	bl	80010f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN2_Pin|LED_BINKY_Pin|SEG1_0_Pin
 8000362:	2200      	movs	r2, #0
 8000364:	f641 71e3 	movw	r1, #8163	; 0x1fe3
 8000368:	482a      	ldr	r0, [pc, #168]	; (8000414 <MX_GPIO_Init+0x130>)
 800036a:	f000 fec4 	bl	80010f6 <HAL_GPIO_WritePin>
                          |SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin|SEG1_4_Pin
                          |SEG1_5_Pin|SEG1_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A4_Pin|SEG0_Pin|SEG1_Pin|B2_Pin
 800036e:	2200      	movs	r2, #0
 8000370:	f24f 41ff 	movw	r1, #62719	; 0xf4ff
 8000374:	4828      	ldr	r0, [pc, #160]	; (8000418 <MX_GPIO_Init+0x134>)
 8000376:	f000 febe 	bl	80010f6 <HAL_GPIO_WritePin>
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |A1_Pin|A2_Pin|B1_Pin|B3_Pin
                          |SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800037a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800037e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000384:	2301      	movs	r3, #1
 8000386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000388:	f107 0310 	add.w	r3, r7, #16
 800038c:	4619      	mov	r1, r3
 800038e:	4820      	ldr	r0, [pc, #128]	; (8000410 <MX_GPIO_Init+0x12c>)
 8000390:	f000 fd16 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B4_Pin A3_Pin */
  GPIO_InitStruct.Pin = B4_Pin|A3_Pin;
 8000394:	2382      	movs	r3, #130	; 0x82
 8000396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000398:	2301      	movs	r3, #1
 800039a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	2300      	movs	r3, #0
 800039e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a0:	2302      	movs	r3, #2
 80003a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	4619      	mov	r1, r3
 80003aa:	4819      	ldr	r0, [pc, #100]	; (8000410 <MX_GPIO_Init+0x12c>)
 80003ac:	f000 fd08 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin LED_BINKY_Pin SEG1_0_Pin
                           SEG1_1_Pin SEG1_2_Pin SEG1_3_Pin SEG1_4_Pin
                           SEG1_5_Pin SEG1_6_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|LED_BINKY_Pin|SEG1_0_Pin
 80003b0:	f641 73e3 	movw	r3, #8163	; 0x1fe3
 80003b4:	613b      	str	r3, [r7, #16]
                          |SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin|SEG1_4_Pin
                          |SEG1_5_Pin|SEG1_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	2302      	movs	r3, #2
 80003c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	4619      	mov	r1, r3
 80003c8:	4812      	ldr	r0, [pc, #72]	; (8000414 <MX_GPIO_Init+0x130>)
 80003ca:	f000 fcf9 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 80003ce:	230c      	movs	r3, #12
 80003d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003d6:	2301      	movs	r3, #1
 80003d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	4619      	mov	r1, r3
 80003e0:	480c      	ldr	r0, [pc, #48]	; (8000414 <MX_GPIO_Init+0x130>)
 80003e2:	f000 fced 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A4_Pin SEG0_Pin SEG1_Pin B2_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           A1_Pin A2_Pin B1_Pin B3_Pin
                           SEG6_Pin */
  GPIO_InitStruct.Pin = A4_Pin|SEG0_Pin|SEG1_Pin|B2_Pin
 80003e6:	f24f 43ff 	movw	r3, #62719	; 0xf4ff
 80003ea:	613b      	str	r3, [r7, #16]
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |A1_Pin|A2_Pin|B1_Pin|B3_Pin
                          |SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2302      	movs	r3, #2
 80003f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	4619      	mov	r1, r3
 80003fe:	4806      	ldr	r0, [pc, #24]	; (8000418 <MX_GPIO_Init+0x134>)
 8000400:	f000 fcde 	bl	8000dc0 <HAL_GPIO_Init>

}
 8000404:	bf00      	nop
 8000406:	3720      	adds	r7, #32
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40021000 	.word	0x40021000
 8000410:	40011000 	.word	0x40011000
 8000414:	40010800 	.word	0x40010800
 8000418:	40010c00 	.word	0x40010c00

0800041c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	timerRun();
 8000424:	f004 f94a 	bl	80046bc <timerRun>
	button_reading(GPIOx, GPIO_Pin);
 8000428:	4903      	ldr	r1, [pc, #12]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800042a:	4804      	ldr	r0, [pc, #16]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800042c:	f004 f892 	bl	8004554 <button_reading>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	2000000c 	.word	0x2000000c
 800043c:	20000000 	.word	0x20000000

08000440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000448:	e7fe      	b.n	8000448 <Error_Handler+0x8>
	...

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000452:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <HAL_MspInit+0x5c>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6193      	str	r3, [r2, #24]
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_MspInit+0x5c>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <HAL_MspInit+0x5c>)
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <HAL_MspInit+0x5c>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <HAL_MspInit+0x60>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <HAL_MspInit+0x60>)
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010000 	.word	0x40010000

080004b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08a      	sub	sp, #40	; 0x28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a25      	ldr	r2, [pc, #148]	; (8000560 <HAL_I2C_MspInit+0xb0>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d142      	bne.n	8000556 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b24      	ldr	r3, [pc, #144]	; (8000564 <HAL_I2C_MspInit+0xb4>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a23      	ldr	r2, [pc, #140]	; (8000564 <HAL_I2C_MspInit+0xb4>)
 80004d6:	f043 0308 	orr.w	r3, r3, #8
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b21      	ldr	r3, [pc, #132]	; (8000564 <HAL_I2C_MspInit+0xb4>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0308 	and.w	r3, r3, #8
 80004e4:	613b      	str	r3, [r7, #16]
 80004e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ee:	2312      	movs	r3, #18
 80004f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f2:	2303      	movs	r3, #3
 80004f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4619      	mov	r1, r3
 80004fc:	481a      	ldr	r0, [pc, #104]	; (8000568 <HAL_I2C_MspInit+0xb8>)
 80004fe:	f000 fc5f 	bl	8000dc0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <HAL_I2C_MspInit+0xbc>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
 8000508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800050e:	627b      	str	r3, [r7, #36]	; 0x24
 8000510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000512:	f043 0302 	orr.w	r3, r3, #2
 8000516:	627b      	str	r3, [r7, #36]	; 0x24
 8000518:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_I2C_MspInit+0xbc>)
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <HAL_I2C_MspInit+0xb4>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <HAL_I2C_MspInit+0xb4>)
 8000524:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_I2C_MspInit+0xb4>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	201f      	movs	r0, #31
 800053c:	f000 fb83 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000540:	201f      	movs	r0, #31
 8000542:	f000 fb9c 	bl	8000c7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2020      	movs	r0, #32
 800054c:	f000 fb7b 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000550:	2020      	movs	r0, #32
 8000552:	f000 fb94 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000556:	bf00      	nop
 8000558:	3728      	adds	r7, #40	; 0x28
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40005400 	.word	0x40005400
 8000564:	40021000 	.word	0x40021000
 8000568:	40010c00 	.word	0x40010c00
 800056c:	40010000 	.word	0x40010000

08000570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000580:	d113      	bne.n	80005aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_TIM_Base_MspInit+0x44>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <HAL_TIM_Base_MspInit+0x44>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <HAL_TIM_Base_MspInit+0x44>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	201c      	movs	r0, #28
 80005a0:	f000 fb51 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005a4:	201c      	movs	r0, #28
 80005a6:	f000 fb6a 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000

080005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <NMI_Handler+0x4>

080005be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <HardFault_Handler+0x4>

080005c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <MemManage_Handler+0x4>

080005ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <BusFault_Handler+0x4>

080005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <UsageFault_Handler+0x4>

080005d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fe:	f000 fa2f 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800060c:	4802      	ldr	r0, [pc, #8]	; (8000618 <TIM2_IRQHandler+0x10>)
 800060e:	f003 f8f9 	bl	8003804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000110 	.word	0x20000110

0800061c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <I2C1_EV_IRQHandler+0x10>)
 8000622:	f000 ff80 	bl	8001526 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000bc 	.word	0x200000bc

08000630 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <I2C1_ER_IRQHandler+0x10>)
 8000636:	f001 f8e7 	bl	8001808 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200000bc 	.word	0x200000bc

08000644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <convert>:
	REDYELLOW,
	GREENRED,
	YELLOWRED
} state_traffic;
int state ;
void convert (GPIO_TypeDef * GPIOxA,GPIO_TypeDef * GPIOxB, uint16_t A, uint16_t B, State type){
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	4611      	mov	r1, r2
 800065c:	461a      	mov	r2, r3
 800065e:	460b      	mov	r3, r1
 8000660:	80fb      	strh	r3, [r7, #6]
 8000662:	4613      	mov	r3, r2
 8000664:	80bb      	strh	r3, [r7, #4]
	switch (type) {
 8000666:	7e3b      	ldrb	r3, [r7, #24]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d012      	beq.n	8000692 <convert+0x42>
 800066c:	2b02      	cmp	r3, #2
 800066e:	dc2a      	bgt.n	80006c6 <convert+0x76>
 8000670:	2b00      	cmp	r3, #0
 8000672:	d01b      	beq.n	80006ac <convert+0x5c>
 8000674:	2b01      	cmp	r3, #1
 8000676:	d126      	bne.n	80006c6 <convert+0x76>
		case YELLOW:
			HAL_GPIO_WritePin(GPIOxA, A, RESET);
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	2200      	movs	r2, #0
 800067c:	4619      	mov	r1, r3
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f000 fd39 	bl	80010f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOxB, B, SET);
 8000684:	88bb      	ldrh	r3, [r7, #4]
 8000686:	2201      	movs	r2, #1
 8000688:	4619      	mov	r1, r3
 800068a:	68b8      	ldr	r0, [r7, #8]
 800068c:	f000 fd33 	bl	80010f6 <HAL_GPIO_WritePin>
			break;
 8000690:	e01a      	b.n	80006c8 <convert+0x78>
		case GREEN:
			HAL_GPIO_WritePin(GPIOxA, A, SET);
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f000 fd2c 	bl	80010f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOxB, B, RESET);
 800069e:	88bb      	ldrh	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	4619      	mov	r1, r3
 80006a4:	68b8      	ldr	r0, [r7, #8]
 80006a6:	f000 fd26 	bl	80010f6 <HAL_GPIO_WritePin>
			break;
 80006aa:	e00d      	b.n	80006c8 <convert+0x78>
		case RED:
			HAL_GPIO_WritePin(GPIOxA, A, SET);
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	2201      	movs	r2, #1
 80006b0:	4619      	mov	r1, r3
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f000 fd1f 	bl	80010f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOxB, B, SET);
 80006b8:	88bb      	ldrh	r3, [r7, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	4619      	mov	r1, r3
 80006be:	68b8      	ldr	r0, [r7, #8]
 80006c0:	f000 fd19 	bl	80010f6 <HAL_GPIO_WritePin>
			break;
 80006c4:	e000      	b.n	80006c8 <convert+0x78>
		default:
			break;
 80006c6:	bf00      	nop
	}
}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <two_way_traffic_init>:
void two_way_traffic_init(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af02      	add	r7, sp, #8
	setTimer1(1, 1000);
 80006d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006da:	2001      	movs	r0, #1
 80006dc:	f003 ffd0 	bl	8004680 <setTimer1>
	state = GREENRED;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <two_way_traffic_init+0x60>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	601a      	str	r2, [r3, #0]
	convert(A1_GPIO_Port, B1_GPIO_Port, A1_Pin, B1_Pin, GREEN);
 80006e6:	2302      	movs	r3, #2
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2320      	movs	r3, #32
 80006ec:	2208      	movs	r2, #8
 80006ee:	4911      	ldr	r1, [pc, #68]	; (8000734 <two_way_traffic_init+0x64>)
 80006f0:	4810      	ldr	r0, [pc, #64]	; (8000734 <two_way_traffic_init+0x64>)
 80006f2:	f7ff ffad 	bl	8000650 <convert>
	convert(A3_GPIO_Port, B3_GPIO_Port, A3_Pin, B3_Pin, GREEN);
 80006f6:	2302      	movs	r3, #2
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2340      	movs	r3, #64	; 0x40
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	490d      	ldr	r1, [pc, #52]	; (8000734 <two_way_traffic_init+0x64>)
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <two_way_traffic_init+0x68>)
 8000702:	f7ff ffa5 	bl	8000650 <convert>
    convert(A2_GPIO_Port, B2_GPIO_Port, A2_Pin, B2_Pin, RED);
 8000706:	2300      	movs	r3, #0
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070e:	2210      	movs	r2, #16
 8000710:	4908      	ldr	r1, [pc, #32]	; (8000734 <two_way_traffic_init+0x64>)
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <two_way_traffic_init+0x64>)
 8000714:	f7ff ff9c 	bl	8000650 <convert>
	convert(A4_GPIO_Port, B4_GPIO_Port, A4_Pin, B4_Pin, RED);}
 8000718:	2300      	movs	r3, #0
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2302      	movs	r3, #2
 800071e:	2201      	movs	r2, #1
 8000720:	4905      	ldr	r1, [pc, #20]	; (8000738 <two_way_traffic_init+0x68>)
 8000722:	4804      	ldr	r0, [pc, #16]	; (8000734 <two_way_traffic_init+0x64>)
 8000724:	f7ff ff94 	bl	8000650 <convert>
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000158 	.word	0x20000158
 8000734:	40010c00 	.word	0x40010c00
 8000738:	40011000 	.word	0x40011000

0800073c <two_way_traffic_run>:
GPIO_TypeDef* LED71[7] = {SEG1_0_GPIO_Port,SEG1_1_GPIO_Port,SEG1_2_GPIO_Port,SEG1_3_GPIO_Port,SEG1_4_GPIO_Port,SEG1_5_GPIO_Port,SEG1_6_GPIO_Port};
uint16_t LED71_Pin[7] = {SEG1_0_Pin,SEG1_1_Pin,SEG1_2_Pin,SEG1_3_Pin,SEG1_4_Pin,SEG1_5_Pin,SEG1_6_Pin};
int count = 3;

int count_1 = 5;
void two_way_traffic_run(){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af02      	add	r7, sp, #8
    switch (state){
 8000742:	4b87      	ldr	r3, [pc, #540]	; (8000960 <two_way_traffic_run+0x224>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b03      	cmp	r3, #3
 8000748:	f200 80d9 	bhi.w	80008fe <two_way_traffic_run+0x1c2>
 800074c:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <two_way_traffic_run+0x18>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	0800083b 	.word	0x0800083b
 8000758:	080008a1 	.word	0x080008a1
 800075c:	08000765 	.word	0x08000765
 8000760:	080007cd 	.word	0x080007cd
        case GREENRED:
            // GREEN 3s
            if(count >=4)
 8000764:	4b7f      	ldr	r3, [pc, #508]	; (8000964 <two_way_traffic_run+0x228>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b03      	cmp	r3, #3
 800076a:	dd02      	ble.n	8000772 <two_way_traffic_run+0x36>
            {
                count =3;
 800076c:	4b7d      	ldr	r3, [pc, #500]	; (8000964 <two_way_traffic_run+0x228>)
 800076e:	2203      	movs	r2, #3
 8000770:	601a      	str	r2, [r3, #0]
            }
            if(count <=0)
 8000772:	4b7c      	ldr	r3, [pc, #496]	; (8000964 <two_way_traffic_run+0x228>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	f300 80c5 	bgt.w	8000906 <two_way_traffic_run+0x1ca>
            {
                state = YELLOWRED;
 800077c:	4b78      	ldr	r3, [pc, #480]	; (8000960 <two_way_traffic_run+0x224>)
 800077e:	2203      	movs	r2, #3
 8000780:	601a      	str	r2, [r3, #0]
                count = 2;
 8000782:	4b78      	ldr	r3, [pc, #480]	; (8000964 <two_way_traffic_run+0x228>)
 8000784:	2202      	movs	r2, #2
 8000786:	601a      	str	r2, [r3, #0]

                // Chuyển đổi trạng thái đèn giao thông
                convert(A1_GPIO_Port, B1_GPIO_Port, A1_Pin, B1_Pin, YELLOW);
 8000788:	2301      	movs	r3, #1
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2320      	movs	r3, #32
 800078e:	2208      	movs	r2, #8
 8000790:	4975      	ldr	r1, [pc, #468]	; (8000968 <two_way_traffic_run+0x22c>)
 8000792:	4875      	ldr	r0, [pc, #468]	; (8000968 <two_way_traffic_run+0x22c>)
 8000794:	f7ff ff5c 	bl	8000650 <convert>
                convert(A2_GPIO_Port, B2_GPIO_Port, A2_Pin, B2_Pin, RED);
 8000798:	2300      	movs	r3, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a0:	2210      	movs	r2, #16
 80007a2:	4971      	ldr	r1, [pc, #452]	; (8000968 <two_way_traffic_run+0x22c>)
 80007a4:	4870      	ldr	r0, [pc, #448]	; (8000968 <two_way_traffic_run+0x22c>)
 80007a6:	f7ff ff53 	bl	8000650 <convert>
                convert(A3_GPIO_Port, B3_GPIO_Port, A3_Pin, B3_Pin, YELLOW);
 80007aa:	2301      	movs	r3, #1
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2340      	movs	r3, #64	; 0x40
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	496d      	ldr	r1, [pc, #436]	; (8000968 <two_way_traffic_run+0x22c>)
 80007b4:	486d      	ldr	r0, [pc, #436]	; (800096c <two_way_traffic_run+0x230>)
 80007b6:	f7ff ff4b 	bl	8000650 <convert>
                convert(A4_GPIO_Port, B4_GPIO_Port, A4_Pin, B4_Pin, RED);
 80007ba:	2300      	movs	r3, #0
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2302      	movs	r3, #2
 80007c0:	2201      	movs	r2, #1
 80007c2:	496a      	ldr	r1, [pc, #424]	; (800096c <two_way_traffic_run+0x230>)
 80007c4:	4868      	ldr	r0, [pc, #416]	; (8000968 <two_way_traffic_run+0x22c>)
 80007c6:	f7ff ff43 	bl	8000650 <convert>
            }
            break;
 80007ca:	e09c      	b.n	8000906 <two_way_traffic_run+0x1ca>

        case YELLOWRED:
            // YELLOW 2s
            if(count >=3)
 80007cc:	4b65      	ldr	r3, [pc, #404]	; (8000964 <two_way_traffic_run+0x228>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	dd02      	ble.n	80007da <two_way_traffic_run+0x9e>
            {
                count =2;
 80007d4:	4b63      	ldr	r3, [pc, #396]	; (8000964 <two_way_traffic_run+0x228>)
 80007d6:	2202      	movs	r2, #2
 80007d8:	601a      	str	r2, [r3, #0]
            }
            if(count <=0)
 80007da:	4b62      	ldr	r3, [pc, #392]	; (8000964 <two_way_traffic_run+0x228>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	f300 8093 	bgt.w	800090a <two_way_traffic_run+0x1ce>
            {
                state = REDGREEN;
 80007e4:	4b5e      	ldr	r3, [pc, #376]	; (8000960 <two_way_traffic_run+0x224>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
                count = 5;
 80007ea:	4b5e      	ldr	r3, [pc, #376]	; (8000964 <two_way_traffic_run+0x228>)
 80007ec:	2205      	movs	r2, #5
 80007ee:	601a      	str	r2, [r3, #0]

                // Chuyển đổi trạng thái đèn giao thông
                convert(A1_GPIO_Port, B1_GPIO_Port, A1_Pin, B1_Pin, RED);
 80007f0:	2300      	movs	r3, #0
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2320      	movs	r3, #32
 80007f6:	2208      	movs	r2, #8
 80007f8:	495b      	ldr	r1, [pc, #364]	; (8000968 <two_way_traffic_run+0x22c>)
 80007fa:	485b      	ldr	r0, [pc, #364]	; (8000968 <two_way_traffic_run+0x22c>)
 80007fc:	f7ff ff28 	bl	8000650 <convert>
                convert(A2_GPIO_Port, B2_GPIO_Port, A2_Pin, B2_Pin, GREEN);
 8000800:	2302      	movs	r3, #2
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	2210      	movs	r2, #16
 800080a:	4957      	ldr	r1, [pc, #348]	; (8000968 <two_way_traffic_run+0x22c>)
 800080c:	4856      	ldr	r0, [pc, #344]	; (8000968 <two_way_traffic_run+0x22c>)
 800080e:	f7ff ff1f 	bl	8000650 <convert>
                convert(A3_GPIO_Port, B3_GPIO_Port, A3_Pin, B3_Pin, RED);
 8000812:	2300      	movs	r3, #0
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2340      	movs	r3, #64	; 0x40
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	4953      	ldr	r1, [pc, #332]	; (8000968 <two_way_traffic_run+0x22c>)
 800081c:	4853      	ldr	r0, [pc, #332]	; (800096c <two_way_traffic_run+0x230>)
 800081e:	f7ff ff17 	bl	8000650 <convert>
                convert(A4_GPIO_Port, B4_GPIO_Port, A4_Pin, B4_Pin, GREEN);
 8000822:	2302      	movs	r3, #2
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2302      	movs	r3, #2
 8000828:	2201      	movs	r2, #1
 800082a:	4950      	ldr	r1, [pc, #320]	; (800096c <two_way_traffic_run+0x230>)
 800082c:	484e      	ldr	r0, [pc, #312]	; (8000968 <two_way_traffic_run+0x22c>)
 800082e:	f7ff ff0f 	bl	8000650 <convert>

                count_1 = 3;
 8000832:	4b4f      	ldr	r3, [pc, #316]	; (8000970 <two_way_traffic_run+0x234>)
 8000834:	2203      	movs	r2, #3
 8000836:	601a      	str	r2, [r3, #0]
            }
            break;
 8000838:	e067      	b.n	800090a <two_way_traffic_run+0x1ce>

        case REDGREEN:
            // RED 5s
            if(count >=6)
 800083a:	4b4a      	ldr	r3, [pc, #296]	; (8000964 <two_way_traffic_run+0x228>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b05      	cmp	r3, #5
 8000840:	dd02      	ble.n	8000848 <two_way_traffic_run+0x10c>
            {
                count =5;
 8000842:	4b48      	ldr	r3, [pc, #288]	; (8000964 <two_way_traffic_run+0x228>)
 8000844:	2205      	movs	r2, #5
 8000846:	601a      	str	r2, [r3, #0]
            }
            if(count_1 <=0){
 8000848:	4b49      	ldr	r3, [pc, #292]	; (8000970 <two_way_traffic_run+0x234>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	dc5e      	bgt.n	800090e <two_way_traffic_run+0x1d2>
                state = REDYELLOW;
 8000850:	4b43      	ldr	r3, [pc, #268]	; (8000960 <two_way_traffic_run+0x224>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
                count_1 = 2;
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <two_way_traffic_run+0x234>)
 8000858:	2202      	movs	r2, #2
 800085a:	601a      	str	r2, [r3, #0]

                // Chuyển đổi trạng thái đèn giao thông
                convert(A1_GPIO_Port, B1_GPIO_Port, A1_Pin, B1_Pin, RED);
 800085c:	2300      	movs	r3, #0
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2320      	movs	r3, #32
 8000862:	2208      	movs	r2, #8
 8000864:	4940      	ldr	r1, [pc, #256]	; (8000968 <two_way_traffic_run+0x22c>)
 8000866:	4840      	ldr	r0, [pc, #256]	; (8000968 <two_way_traffic_run+0x22c>)
 8000868:	f7ff fef2 	bl	8000650 <convert>
                convert(A2_GPIO_Port, B2_GPIO_Port, A2_Pin, B2_Pin, YELLOW);
 800086c:	2301      	movs	r3, #1
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000874:	2210      	movs	r2, #16
 8000876:	493c      	ldr	r1, [pc, #240]	; (8000968 <two_way_traffic_run+0x22c>)
 8000878:	483b      	ldr	r0, [pc, #236]	; (8000968 <two_way_traffic_run+0x22c>)
 800087a:	f7ff fee9 	bl	8000650 <convert>
                convert(A3_GPIO_Port, B3_GPIO_Port, A3_Pin, B3_Pin, RED);
 800087e:	2300      	movs	r3, #0
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	4938      	ldr	r1, [pc, #224]	; (8000968 <two_way_traffic_run+0x22c>)
 8000888:	4838      	ldr	r0, [pc, #224]	; (800096c <two_way_traffic_run+0x230>)
 800088a:	f7ff fee1 	bl	8000650 <convert>
                convert(A4_GPIO_Port, B4_GPIO_Port, A4_Pin, B4_Pin, YELLOW);
 800088e:	2301      	movs	r3, #1
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2302      	movs	r3, #2
 8000894:	2201      	movs	r2, #1
 8000896:	4935      	ldr	r1, [pc, #212]	; (800096c <two_way_traffic_run+0x230>)
 8000898:	4833      	ldr	r0, [pc, #204]	; (8000968 <two_way_traffic_run+0x22c>)
 800089a:	f7ff fed9 	bl	8000650 <convert>
            }
            break;
 800089e:	e036      	b.n	800090e <two_way_traffic_run+0x1d2>

        case REDYELLOW:
            if(count <=0)
 80008a0:	4b30      	ldr	r3, [pc, #192]	; (8000964 <two_way_traffic_run+0x228>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	dc34      	bgt.n	8000912 <two_way_traffic_run+0x1d6>
            {
                state = GREENRED;
 80008a8:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <two_way_traffic_run+0x224>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	601a      	str	r2, [r3, #0]
                count = 3;
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <two_way_traffic_run+0x228>)
 80008b0:	2203      	movs	r2, #3
 80008b2:	601a      	str	r2, [r3, #0]
                count_1 = 5;
 80008b4:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <two_way_traffic_run+0x234>)
 80008b6:	2205      	movs	r2, #5
 80008b8:	601a      	str	r2, [r3, #0]

                // Chuyển đổi trạng thái đèn giao thông
                convert(A1_GPIO_Port, B1_GPIO_Port, A1_Pin, B1_Pin, GREEN);
 80008ba:	2302      	movs	r3, #2
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2320      	movs	r3, #32
 80008c0:	2208      	movs	r2, #8
 80008c2:	4929      	ldr	r1, [pc, #164]	; (8000968 <two_way_traffic_run+0x22c>)
 80008c4:	4828      	ldr	r0, [pc, #160]	; (8000968 <two_way_traffic_run+0x22c>)
 80008c6:	f7ff fec3 	bl	8000650 <convert>
                convert(A2_GPIO_Port, B2_GPIO_Port, A2_Pin, B2_Pin, RED);
 80008ca:	2300      	movs	r3, #0
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d2:	2210      	movs	r2, #16
 80008d4:	4924      	ldr	r1, [pc, #144]	; (8000968 <two_way_traffic_run+0x22c>)
 80008d6:	4824      	ldr	r0, [pc, #144]	; (8000968 <two_way_traffic_run+0x22c>)
 80008d8:	f7ff feba 	bl	8000650 <convert>
                convert(A3_GPIO_Port, B3_GPIO_Port, A3_Pin, B3_Pin, GREEN);
 80008dc:	2302      	movs	r3, #2
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	4920      	ldr	r1, [pc, #128]	; (8000968 <two_way_traffic_run+0x22c>)
 80008e6:	4821      	ldr	r0, [pc, #132]	; (800096c <two_way_traffic_run+0x230>)
 80008e8:	f7ff feb2 	bl	8000650 <convert>
                convert(A4_GPIO_Port, B4_GPIO_Port, A4_Pin, B4_Pin, RED);
 80008ec:	2300      	movs	r3, #0
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2302      	movs	r3, #2
 80008f2:	2201      	movs	r2, #1
 80008f4:	491d      	ldr	r1, [pc, #116]	; (800096c <two_way_traffic_run+0x230>)
 80008f6:	481c      	ldr	r0, [pc, #112]	; (8000968 <two_way_traffic_run+0x22c>)
 80008f8:	f7ff feaa 	bl	8000650 <convert>
            }
            break;
 80008fc:	e009      	b.n	8000912 <two_way_traffic_run+0x1d6>

        default:
            state = 0;
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <two_way_traffic_run+0x224>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
            break;
 8000904:	e006      	b.n	8000914 <two_way_traffic_run+0x1d8>
            break;
 8000906:	bf00      	nop
 8000908:	e004      	b.n	8000914 <two_way_traffic_run+0x1d8>
            break;
 800090a:	bf00      	nop
 800090c:	e002      	b.n	8000914 <two_way_traffic_run+0x1d8>
            break;
 800090e:	bf00      	nop
 8000910:	e000      	b.n	8000914 <two_way_traffic_run+0x1d8>
            break;
 8000912:	bf00      	nop
    }

    if(timer1_flag[1] == 1){
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <two_way_traffic_run+0x238>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d10e      	bne.n	800093a <two_way_traffic_run+0x1fe>
        setTimer1(1, 1000);
 800091c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000920:	2001      	movs	r0, #1
 8000922:	f003 fead 	bl	8004680 <setTimer1>
        count_1--;
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <two_way_traffic_run+0x234>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3b01      	subs	r3, #1
 800092c:	4a10      	ldr	r2, [pc, #64]	; (8000970 <two_way_traffic_run+0x234>)
 800092e:	6013      	str	r3, [r2, #0]
        count--;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <two_way_traffic_run+0x228>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3b01      	subs	r3, #1
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <two_way_traffic_run+0x228>)
 8000938:	6013      	str	r3, [r2, #0]
    }

    DISPLAY_LED_7_SEGMENT_PREMIUM(LED70, LED70_Pin, count-1);
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <two_way_traffic_run+0x228>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3b01      	subs	r3, #1
 8000940:	461a      	mov	r2, r3
 8000942:	490d      	ldr	r1, [pc, #52]	; (8000978 <two_way_traffic_run+0x23c>)
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <two_way_traffic_run+0x240>)
 8000946:	f003 faad 	bl	8003ea4 <DISPLAY_LED_7_SEGMENT_PREMIUM>
    DISPLAY_LED_7_SEGMENT_PREMIUM(LED71, LED71_Pin, count_1-1);
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <two_way_traffic_run+0x234>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	3b01      	subs	r3, #1
 8000950:	461a      	mov	r2, r3
 8000952:	490b      	ldr	r1, [pc, #44]	; (8000980 <two_way_traffic_run+0x244>)
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <two_way_traffic_run+0x248>)
 8000956:	f003 faa5 	bl	8003ea4 <DISPLAY_LED_7_SEGMENT_PREMIUM>
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000158 	.word	0x20000158
 8000964:	20000070 	.word	0x20000070
 8000968:	40010c00 	.word	0x40010c00
 800096c:	40011000 	.word	0x40011000
 8000970:	20000074 	.word	0x20000074
 8000974:	20000168 	.word	0x20000168
 8000978:	20000034 	.word	0x20000034
 800097c:	20000018 	.word	0x20000018
 8000980:	20000060 	.word	0x20000060
 8000984:	20000044 	.word	0x20000044

08000988 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000988:	f7ff fe5c 	bl	8000644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480b      	ldr	r0, [pc, #44]	; (80009bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800098e:	490c      	ldr	r1, [pc, #48]	; (80009c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000990:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009a4:	4c09      	ldr	r4, [pc, #36]	; (80009cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b2:	f003 feb3 	bl	800471c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b6:	f7ff fbc9 	bl	800014c <main>
  bx lr
 80009ba:	4770      	bx	lr
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80009c4:	080047c0 	.word	0x080047c0
  ldr r2, =_sbss
 80009c8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80009cc:	200001b8 	.word	0x200001b8

080009d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_2_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_Init+0x28>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_Init+0x28>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e4:	2003      	movs	r0, #3
 80009e6:	f000 f923 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f000 f808 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f0:	f7ff fd2c 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40022000 	.word	0x40022000

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x54>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x58>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f93b 	bl	8000c9a <HAL_SYSTICK_Config>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00e      	b.n	8000a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d80a      	bhi.n	8000a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f000 f903 	bl	8000c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_InitTick+0x5c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000014 	.word	0x20000014
 8000a58:	2000007c 	.word	0x2000007c
 8000a5c:	20000078 	.word	0x20000078

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_IncTick+0x20>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	2000007c 	.word	0x2000007c
 8000a80:	2000015c 	.word	0x2000015c

08000a84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <HAL_GetTick+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	2000015c 	.word	0x2000015c

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4906      	ldr	r1, [pc, #24]	; (8000b30 <__NVIC_EnableIRQ+0x34>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f7ff ff90 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff2d 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff42 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff90 	bl	8000b88 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5f 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff35 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffa2 	bl	8000bec <SysTick_Config>
 8000ca8:	4603      	mov	r3, r0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d005      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2204      	movs	r2, #4
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e051      	b.n	8000d7c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 020e 	bic.w	r2, r2, #14
 8000ce6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f022 0201 	bic.w	r2, r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <HAL_DMA_Abort_IT+0xd4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d029      	beq.n	8000d56 <HAL_DMA_Abort_IT+0xa2>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a21      	ldr	r2, [pc, #132]	; (8000d8c <HAL_DMA_Abort_IT+0xd8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d022      	beq.n	8000d52 <HAL_DMA_Abort_IT+0x9e>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1f      	ldr	r2, [pc, #124]	; (8000d90 <HAL_DMA_Abort_IT+0xdc>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d01a      	beq.n	8000d4c <HAL_DMA_Abort_IT+0x98>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a1e      	ldr	r2, [pc, #120]	; (8000d94 <HAL_DMA_Abort_IT+0xe0>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d012      	beq.n	8000d46 <HAL_DMA_Abort_IT+0x92>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <HAL_DMA_Abort_IT+0xe4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00a      	beq.n	8000d40 <HAL_DMA_Abort_IT+0x8c>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <HAL_DMA_Abort_IT+0xe8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d102      	bne.n	8000d3a <HAL_DMA_Abort_IT+0x86>
 8000d34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d38:	e00e      	b.n	8000d58 <HAL_DMA_Abort_IT+0xa4>
 8000d3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d3e:	e00b      	b.n	8000d58 <HAL_DMA_Abort_IT+0xa4>
 8000d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d44:	e008      	b.n	8000d58 <HAL_DMA_Abort_IT+0xa4>
 8000d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4a:	e005      	b.n	8000d58 <HAL_DMA_Abort_IT+0xa4>
 8000d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d50:	e002      	b.n	8000d58 <HAL_DMA_Abort_IT+0xa4>
 8000d52:	2310      	movs	r3, #16
 8000d54:	e000      	b.n	8000d58 <HAL_DMA_Abort_IT+0xa4>
 8000d56:	2301      	movs	r3, #1
 8000d58:	4a11      	ldr	r2, [pc, #68]	; (8000da0 <HAL_DMA_Abort_IT+0xec>)
 8000d5a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	4798      	blx	r3
    } 
  }
  return status;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40020008 	.word	0x40020008
 8000d8c:	4002001c 	.word	0x4002001c
 8000d90:	40020030 	.word	0x40020030
 8000d94:	40020044 	.word	0x40020044
 8000d98:	40020058 	.word	0x40020058
 8000d9c:	4002006c 	.word	0x4002006c
 8000da0:	40020000 	.word	0x40020000

08000da4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000db2:	b2db      	uxtb	r3, r3
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
	...

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b08b      	sub	sp, #44	; 0x2c
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd2:	e169      	b.n	80010a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f040 8158 	bne.w	80010a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	4a9a      	ldr	r2, [pc, #616]	; (8001060 <HAL_GPIO_Init+0x2a0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d05e      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000dfc:	4a98      	ldr	r2, [pc, #608]	; (8001060 <HAL_GPIO_Init+0x2a0>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d875      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e02:	4a98      	ldr	r2, [pc, #608]	; (8001064 <HAL_GPIO_Init+0x2a4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d058      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000e08:	4a96      	ldr	r2, [pc, #600]	; (8001064 <HAL_GPIO_Init+0x2a4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d86f      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e0e:	4a96      	ldr	r2, [pc, #600]	; (8001068 <HAL_GPIO_Init+0x2a8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d052      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000e14:	4a94      	ldr	r2, [pc, #592]	; (8001068 <HAL_GPIO_Init+0x2a8>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d869      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e1a:	4a94      	ldr	r2, [pc, #592]	; (800106c <HAL_GPIO_Init+0x2ac>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d04c      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000e20:	4a92      	ldr	r2, [pc, #584]	; (800106c <HAL_GPIO_Init+0x2ac>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d863      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e26:	4a92      	ldr	r2, [pc, #584]	; (8001070 <HAL_GPIO_Init+0x2b0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d046      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000e2c:	4a90      	ldr	r2, [pc, #576]	; (8001070 <HAL_GPIO_Init+0x2b0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d85d      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e32:	2b12      	cmp	r3, #18
 8000e34:	d82a      	bhi.n	8000e8c <HAL_GPIO_Init+0xcc>
 8000e36:	2b12      	cmp	r3, #18
 8000e38:	d859      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e3a:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <HAL_GPIO_Init+0x80>)
 8000e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e40:	08000ebb 	.word	0x08000ebb
 8000e44:	08000e95 	.word	0x08000e95
 8000e48:	08000ea7 	.word	0x08000ea7
 8000e4c:	08000ee9 	.word	0x08000ee9
 8000e50:	08000eef 	.word	0x08000eef
 8000e54:	08000eef 	.word	0x08000eef
 8000e58:	08000eef 	.word	0x08000eef
 8000e5c:	08000eef 	.word	0x08000eef
 8000e60:	08000eef 	.word	0x08000eef
 8000e64:	08000eef 	.word	0x08000eef
 8000e68:	08000eef 	.word	0x08000eef
 8000e6c:	08000eef 	.word	0x08000eef
 8000e70:	08000eef 	.word	0x08000eef
 8000e74:	08000eef 	.word	0x08000eef
 8000e78:	08000eef 	.word	0x08000eef
 8000e7c:	08000eef 	.word	0x08000eef
 8000e80:	08000eef 	.word	0x08000eef
 8000e84:	08000e9d 	.word	0x08000e9d
 8000e88:	08000eb1 	.word	0x08000eb1
 8000e8c:	4a79      	ldr	r2, [pc, #484]	; (8001074 <HAL_GPIO_Init+0x2b4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d013      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e92:	e02c      	b.n	8000eee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	623b      	str	r3, [r7, #32]
          break;
 8000e9a:	e029      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	623b      	str	r3, [r7, #32]
          break;
 8000ea4:	e024      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	3308      	adds	r3, #8
 8000eac:	623b      	str	r3, [r7, #32]
          break;
 8000eae:	e01f      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	330c      	adds	r3, #12
 8000eb6:	623b      	str	r3, [r7, #32]
          break;
 8000eb8:	e01a      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	623b      	str	r3, [r7, #32]
          break;
 8000ec6:	e013      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d105      	bne.n	8000edc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	611a      	str	r2, [r3, #16]
          break;
 8000eda:	e009      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000edc:	2308      	movs	r3, #8
 8000ede:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	615a      	str	r2, [r3, #20]
          break;
 8000ee6:	e003      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
          break;
 8000eec:	e000      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          break;
 8000eee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2bff      	cmp	r3, #255	; 0xff
 8000ef4:	d801      	bhi.n	8000efa <HAL_GPIO_Init+0x13a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	e001      	b.n	8000efe <HAL_GPIO_Init+0x13e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3304      	adds	r3, #4
 8000efe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	2bff      	cmp	r3, #255	; 0xff
 8000f04:	d802      	bhi.n	8000f0c <HAL_GPIO_Init+0x14c>
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	e002      	b.n	8000f12 <HAL_GPIO_Init+0x152>
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	3b08      	subs	r3, #8
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	210f      	movs	r1, #15
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	401a      	ands	r2, r3
 8000f24:	6a39      	ldr	r1, [r7, #32]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 80b1 	beq.w	80010a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f40:	4b4d      	ldr	r3, [pc, #308]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a4c      	ldr	r2, [pc, #304]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b4a      	ldr	r3, [pc, #296]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f58:	4a48      	ldr	r2, [pc, #288]	; (800107c <HAL_GPIO_Init+0x2bc>)
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a40      	ldr	r2, [pc, #256]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d013      	beq.n	8000fac <HAL_GPIO_Init+0x1ec>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a3f      	ldr	r2, [pc, #252]	; (8001084 <HAL_GPIO_Init+0x2c4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d00d      	beq.n	8000fa8 <HAL_GPIO_Init+0x1e8>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a3e      	ldr	r2, [pc, #248]	; (8001088 <HAL_GPIO_Init+0x2c8>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d007      	beq.n	8000fa4 <HAL_GPIO_Init+0x1e4>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a3d      	ldr	r2, [pc, #244]	; (800108c <HAL_GPIO_Init+0x2cc>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d101      	bne.n	8000fa0 <HAL_GPIO_Init+0x1e0>
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e006      	b.n	8000fae <HAL_GPIO_Init+0x1ee>
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	e004      	b.n	8000fae <HAL_GPIO_Init+0x1ee>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e002      	b.n	8000fae <HAL_GPIO_Init+0x1ee>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e000      	b.n	8000fae <HAL_GPIO_Init+0x1ee>
 8000fac:	2300      	movs	r3, #0
 8000fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb0:	f002 0203 	and.w	r2, r2, #3
 8000fb4:	0092      	lsls	r2, r2, #2
 8000fb6:	4093      	lsls	r3, r2
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fbe:	492f      	ldr	r1, [pc, #188]	; (800107c <HAL_GPIO_Init+0x2bc>)
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	492c      	ldr	r1, [pc, #176]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	608b      	str	r3, [r1, #8]
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	4928      	ldr	r1, [pc, #160]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001000:	4b23      	ldr	r3, [pc, #140]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	4922      	ldr	r1, [pc, #136]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	60cb      	str	r3, [r1, #12]
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	43db      	mvns	r3, r3
 8001016:	491e      	ldr	r1, [pc, #120]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8001018:	4013      	ands	r3, r2
 800101a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	4918      	ldr	r1, [pc, #96]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	43db      	mvns	r3, r3
 800103e:	4914      	ldr	r1, [pc, #80]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8001040:	4013      	ands	r3, r2
 8001042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d021      	beq.n	8001094 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	490e      	ldr	r1, [pc, #56]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
 800105c:	e021      	b.n	80010a2 <HAL_GPIO_Init+0x2e2>
 800105e:	bf00      	nop
 8001060:	10320000 	.word	0x10320000
 8001064:	10310000 	.word	0x10310000
 8001068:	10220000 	.word	0x10220000
 800106c:	10210000 	.word	0x10210000
 8001070:	10120000 	.word	0x10120000
 8001074:	10110000 	.word	0x10110000
 8001078:	40021000 	.word	0x40021000
 800107c:	40010000 	.word	0x40010000
 8001080:	40010800 	.word	0x40010800
 8001084:	40010c00 	.word	0x40010c00
 8001088:	40011000 	.word	0x40011000
 800108c:	40011400 	.word	0x40011400
 8001090:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_GPIO_Init+0x304>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	43db      	mvns	r3, r3
 800109c:	4909      	ldr	r1, [pc, #36]	; (80010c4 <HAL_GPIO_Init+0x304>)
 800109e:	4013      	ands	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	3301      	adds	r3, #1
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	fa22 f303 	lsr.w	r3, r2, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f47f ae8e 	bne.w	8000dd4 <HAL_GPIO_Init+0x14>
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	372c      	adds	r7, #44	; 0x2c
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	40010400 	.word	0x40010400

080010c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	4013      	ands	r3, r2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e001      	b.n	80010ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	807b      	strh	r3, [r7, #2]
 8001102:	4613      	mov	r3, r2
 8001104:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001106:	787b      	ldrb	r3, [r7, #1]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800110c:	887a      	ldrh	r2, [r7, #2]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001112:	e003      	b.n	800111c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	041a      	lsls	r2, r3, #16
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	611a      	str	r2, [r3, #16]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
	...

08001128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e12b      	b.n	8001392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d106      	bne.n	8001154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff f9ae 	bl	80004b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2224      	movs	r2, #36	; 0x24
 8001158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800117a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800118a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800118c:	f002 fa66 	bl	800365c <HAL_RCC_GetPCLK1Freq>
 8001190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a81      	ldr	r2, [pc, #516]	; (800139c <HAL_I2C_Init+0x274>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d807      	bhi.n	80011ac <HAL_I2C_Init+0x84>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4a80      	ldr	r2, [pc, #512]	; (80013a0 <HAL_I2C_Init+0x278>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	bf94      	ite	ls
 80011a4:	2301      	movls	r3, #1
 80011a6:	2300      	movhi	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	e006      	b.n	80011ba <HAL_I2C_Init+0x92>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4a7d      	ldr	r2, [pc, #500]	; (80013a4 <HAL_I2C_Init+0x27c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	bf94      	ite	ls
 80011b4:	2301      	movls	r3, #1
 80011b6:	2300      	movhi	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e0e7      	b.n	8001392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4a78      	ldr	r2, [pc, #480]	; (80013a8 <HAL_I2C_Init+0x280>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	430a      	orrs	r2, r1
 80011e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a6a      	ldr	r2, [pc, #424]	; (800139c <HAL_I2C_Init+0x274>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d802      	bhi.n	80011fc <HAL_I2C_Init+0xd4>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3301      	adds	r3, #1
 80011fa:	e009      	b.n	8001210 <HAL_I2C_Init+0xe8>
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001202:	fb02 f303 	mul.w	r3, r2, r3
 8001206:	4a69      	ldr	r2, [pc, #420]	; (80013ac <HAL_I2C_Init+0x284>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	099b      	lsrs	r3, r3, #6
 800120e:	3301      	adds	r3, #1
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	430b      	orrs	r3, r1
 8001216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001222:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	495c      	ldr	r1, [pc, #368]	; (800139c <HAL_I2C_Init+0x274>)
 800122c:	428b      	cmp	r3, r1
 800122e:	d819      	bhi.n	8001264 <HAL_I2C_Init+0x13c>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1e59      	subs	r1, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fbb1 f3f3 	udiv	r3, r1, r3
 800123e:	1c59      	adds	r1, r3, #1
 8001240:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001244:	400b      	ands	r3, r1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00a      	beq.n	8001260 <HAL_I2C_Init+0x138>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1e59      	subs	r1, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fbb1 f3f3 	udiv	r3, r1, r3
 8001258:	3301      	adds	r3, #1
 800125a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800125e:	e051      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 8001260:	2304      	movs	r3, #4
 8001262:	e04f      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d111      	bne.n	8001290 <HAL_I2C_Init+0x168>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	440b      	add	r3, r1
 800127a:	fbb0 f3f3 	udiv	r3, r0, r3
 800127e:	3301      	adds	r3, #1
 8001280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	e012      	b.n	80012b6 <HAL_I2C_Init+0x18e>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1e58      	subs	r0, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	0099      	lsls	r1, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a6:	3301      	adds	r3, #1
 80012a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf0c      	ite	eq
 80012b0:	2301      	moveq	r3, #1
 80012b2:	2300      	movne	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2C_Init+0x196>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e022      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10e      	bne.n	80012e4 <HAL_I2C_Init+0x1bc>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1e58      	subs	r0, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6859      	ldr	r1, [r3, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	440b      	add	r3, r1
 80012d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d8:	3301      	adds	r3, #1
 80012da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e2:	e00f      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1e58      	subs	r0, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	0099      	lsls	r1, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	6809      	ldr	r1, [r1, #0]
 8001308:	4313      	orrs	r3, r2
 800130a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69da      	ldr	r2, [r3, #28]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6911      	ldr	r1, [r2, #16]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68d2      	ldr	r2, [r2, #12]
 800133e:	4311      	orrs	r1, r2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	430b      	orrs	r3, r1
 8001346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2220      	movs	r2, #32
 800137e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	000186a0 	.word	0x000186a0
 80013a0:	001e847f 	.word	0x001e847f
 80013a4:	003d08ff 	.word	0x003d08ff
 80013a8:	431bde83 	.word	0x431bde83
 80013ac:	10624dd3 	.word	0x10624dd3

080013b0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c2:	2b80      	cmp	r3, #128	; 0x80
 80013c4:	d103      	bne.n	80013ce <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	4613      	mov	r3, r2
 80013e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80013f4:	2b28      	cmp	r3, #40	; 0x28
 80013f6:	d15b      	bne.n	80014b0 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e054      	b.n	80014b2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001412:	2302      	movs	r3, #2
 8001414:	e04d      	b.n	80014b2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d007      	beq.n	800143c <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800144a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	222a      	movs	r2, #42	; 0x2a
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2220      	movs	r2, #32
 8001458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	88fa      	ldrh	r2, [r7, #6]
 800146c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001472:	b29a      	uxth	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80014aa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e000      	b.n	80014b2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80014b0:	2302      	movs	r3, #2
  }
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b20      	cmp	r3, #32
 80014ce:	d124      	bne.n	800151a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2228      	movs	r2, #40	; 0x28
 80014d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d007      	beq.n	80014f6 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0201 	orr.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001504:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001514:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800151a:	2302      	movs	r3, #2
  }
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b088      	sub	sp, #32
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001546:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800154e:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	2b10      	cmp	r3, #16
 8001554:	d003      	beq.n	800155e <HAL_I2C_EV_IRQHandler+0x38>
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b40      	cmp	r3, #64	; 0x40
 800155a:	f040 80c1 	bne.w	80016e0 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10d      	bne.n	8001594 <HAL_I2C_EV_IRQHandler+0x6e>
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800157e:	d003      	beq.n	8001588 <HAL_I2C_EV_IRQHandler+0x62>
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001586:	d101      	bne.n	800158c <HAL_I2C_EV_IRQHandler+0x66>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <HAL_I2C_EV_IRQHandler+0x68>
 800158c:	2300      	movs	r3, #0
 800158e:	2b01      	cmp	r3, #1
 8001590:	f000 8132 	beq.w	80017f8 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00c      	beq.n	80015b8 <HAL_I2C_EV_IRQHandler+0x92>
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	0a5b      	lsrs	r3, r3, #9
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f001 fc74 	bl	8002e98 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 fd71 	bl	8002098 <I2C_Master_SB>
 80015b6:	e092      	b.n	80016de <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	08db      	lsrs	r3, r3, #3
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <HAL_I2C_EV_IRQHandler+0xb2>
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	0a5b      	lsrs	r3, r3, #9
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 fde6 	bl	80021a2 <I2C_Master_ADD10>
 80015d6:	e082      	b.n	80016de <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	085b      	lsrs	r3, r3, #1
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d009      	beq.n	80015f8 <HAL_I2C_EV_IRQHandler+0xd2>
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	0a5b      	lsrs	r3, r3, #9
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fdff 	bl	80021f4 <I2C_Master_ADDR>
 80015f6:	e072      	b.n	80016de <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d03b      	beq.n	800167c <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001612:	f000 80f3 	beq.w	80017fc <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	09db      	lsrs	r3, r3, #7
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00f      	beq.n	8001642 <HAL_I2C_EV_IRQHandler+0x11c>
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	0a9b      	lsrs	r3, r3, #10
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <HAL_I2C_EV_IRQHandler+0x11c>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d103      	bne.n	8001642 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f9c9 	bl	80019d2 <I2C_MasterTransmit_TXE>
 8001640:	e04d      	b.n	80016de <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80d6 	beq.w	80017fc <HAL_I2C_EV_IRQHandler+0x2d6>
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	0a5b      	lsrs	r3, r3, #9
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80cf 	beq.w	80017fc <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800165e:	7bbb      	ldrb	r3, [r7, #14]
 8001660:	2b21      	cmp	r3, #33	; 0x21
 8001662:	d103      	bne.n	800166c <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fa50 	bl	8001b0a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800166a:	e0c7      	b.n	80017fc <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b40      	cmp	r3, #64	; 0x40
 8001670:	f040 80c4 	bne.w	80017fc <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 fabe 	bl	8001bf6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800167a:	e0bf      	b.n	80017fc <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800168a:	f000 80b7 	beq.w	80017fc <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	099b      	lsrs	r3, r3, #6
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00f      	beq.n	80016ba <HAL_I2C_EV_IRQHandler+0x194>
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	0a9b      	lsrs	r3, r3, #10
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_I2C_EV_IRQHandler+0x194>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d103      	bne.n	80016ba <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fb37 	bl	8001d26 <I2C_MasterReceive_RXNE>
 80016b8:	e011      	b.n	80016de <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 809a 	beq.w	80017fc <HAL_I2C_EV_IRQHandler+0x2d6>
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	0a5b      	lsrs	r3, r3, #9
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8093 	beq.w	80017fc <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 fbed 	bl	8001eb6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016dc:	e08e      	b.n	80017fc <HAL_I2C_EV_IRQHandler+0x2d6>
 80016de:	e08d      	b.n	80017fc <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d004      	beq.n	80016f2 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	e007      	b.n	8001702 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d012      	beq.n	8001734 <HAL_I2C_EV_IRQHandler+0x20e>
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	0a5b      	lsrs	r3, r3, #9
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00c      	beq.n	8001734 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 ffb8 	bl	80026a2 <I2C_Slave_ADDR>
 8001732:	e066      	b.n	8001802 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d009      	beq.n	8001754 <HAL_I2C_EV_IRQHandler+0x22e>
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	0a5b      	lsrs	r3, r3, #9
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fff3 	bl	8002738 <I2C_Slave_STOPF>
 8001752:	e056      	b.n	8001802 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001754:	7bbb      	ldrb	r3, [r7, #14]
 8001756:	2b21      	cmp	r3, #33	; 0x21
 8001758:	d002      	beq.n	8001760 <HAL_I2C_EV_IRQHandler+0x23a>
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	2b29      	cmp	r3, #41	; 0x29
 800175e:	d125      	bne.n	80017ac <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	09db      	lsrs	r3, r3, #7
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00f      	beq.n	800178c <HAL_I2C_EV_IRQHandler+0x266>
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	0a9b      	lsrs	r3, r3, #10
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d009      	beq.n	800178c <HAL_I2C_EV_IRQHandler+0x266>
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d103      	bne.n	800178c <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 fed0 	bl	800252a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800178a:	e039      	b.n	8001800 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d033      	beq.n	8001800 <HAL_I2C_EV_IRQHandler+0x2da>
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	0a5b      	lsrs	r3, r3, #9
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d02d      	beq.n	8001800 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fefd 	bl	80025a4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017aa:	e029      	b.n	8001800 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	099b      	lsrs	r3, r3, #6
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00f      	beq.n	80017d8 <HAL_I2C_EV_IRQHandler+0x2b2>
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	0a9b      	lsrs	r3, r3, #10
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d009      	beq.n	80017d8 <HAL_I2C_EV_IRQHandler+0x2b2>
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d103      	bne.n	80017d8 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 ff07 	bl	80025e4 <I2C_SlaveReceive_RXNE>
 80017d6:	e014      	b.n	8001802 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00e      	beq.n	8001802 <HAL_I2C_EV_IRQHandler+0x2dc>
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	0a5b      	lsrs	r3, r3, #9
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 ff35 	bl	8002660 <I2C_SlaveReceive_BTF>
 80017f6:	e004      	b.n	8001802 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80017f8:	bf00      	nop
 80017fa:	e002      	b.n	8001802 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017fc:	bf00      	nop
 80017fe:	e000      	b.n	8001802 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001800:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800182a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d016      	beq.n	8001866 <HAL_I2C_ER_IRQHandler+0x5e>
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d010      	beq.n	8001866 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001854:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	0a5b      	lsrs	r3, r3, #9
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00e      	beq.n	8001890 <HAL_I2C_ER_IRQHandler+0x88>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800188e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	0a9b      	lsrs	r3, r3, #10
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d03f      	beq.n	800191c <HAL_I2C_ER_IRQHandler+0x114>
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d039      	beq.n	800191c <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80018a8:	7efb      	ldrb	r3, [r7, #27]
 80018aa:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ba:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80018c2:	7ebb      	ldrb	r3, [r7, #26]
 80018c4:	2b20      	cmp	r3, #32
 80018c6:	d112      	bne.n	80018ee <HAL_I2C_ER_IRQHandler+0xe6>
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10f      	bne.n	80018ee <HAL_I2C_ER_IRQHandler+0xe6>
 80018ce:	7cfb      	ldrb	r3, [r7, #19]
 80018d0:	2b21      	cmp	r3, #33	; 0x21
 80018d2:	d008      	beq.n	80018e6 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80018d4:	7cfb      	ldrb	r3, [r7, #19]
 80018d6:	2b29      	cmp	r3, #41	; 0x29
 80018d8:	d005      	beq.n	80018e6 <HAL_I2C_ER_IRQHandler+0xde>
 80018da:	7cfb      	ldrb	r3, [r7, #19]
 80018dc:	2b28      	cmp	r3, #40	; 0x28
 80018de:	d106      	bne.n	80018ee <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b21      	cmp	r3, #33	; 0x21
 80018e4:	d103      	bne.n	80018ee <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f001 f856 	bl	8002998 <I2C_Slave_AF>
 80018ec:	e016      	b.n	800191c <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018f6:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001900:	7efb      	ldrb	r3, [r7, #27]
 8001902:	2b10      	cmp	r3, #16
 8001904:	d002      	beq.n	800190c <HAL_I2C_ER_IRQHandler+0x104>
 8001906:	7efb      	ldrb	r3, [r7, #27]
 8001908:	2b40      	cmp	r3, #64	; 0x40
 800190a:	d107      	bne.n	800191c <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	0adb      	lsrs	r3, r3, #11
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00e      	beq.n	8001946 <HAL_I2C_ER_IRQHandler+0x13e>
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f043 0308 	orr.w	r3, r3, #8
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001944:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f001 f891 	bl	8002a80 <I2C_ITError>
  }
}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	; 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019e8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d150      	bne.n	8001a9a <I2C_MasterTransmit_TXE+0xc8>
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b21      	cmp	r3, #33	; 0x21
 80019fc:	d14d      	bne.n	8001a9a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d01d      	beq.n	8001a40 <I2C_MasterTransmit_TXE+0x6e>
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b20      	cmp	r3, #32
 8001a08:	d01a      	beq.n	8001a40 <I2C_MasterTransmit_TXE+0x6e>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a10:	d016      	beq.n	8001a40 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a20:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2211      	movs	r2, #17
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2220      	movs	r2, #32
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff94 	bl	8001966 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a3e:	e060      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a4e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a5e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b40      	cmp	r3, #64	; 0x40
 8001a78:	d107      	bne.n	8001a8a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff8a 	bl	800199c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a88:	e03b      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff67 	bl	8001966 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a98:	e033      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	2b21      	cmp	r3, #33	; 0x21
 8001a9e:	d005      	beq.n	8001aac <I2C_MasterTransmit_TXE+0xda>
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	2b40      	cmp	r3, #64	; 0x40
 8001aa4:	d12d      	bne.n	8001b02 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b22      	cmp	r3, #34	; 0x22
 8001aaa:	d12a      	bne.n	8001b02 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d108      	bne.n	8001ac8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ac4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001ac6:	e01c      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b40      	cmp	r3, #64	; 0x40
 8001ad2:	d103      	bne.n	8001adc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f88e 	bl	8001bf6 <I2C_MemoryTransmit_TXE_BTF>
}
 8001ada:	e012      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b00:	e7ff      	b.n	8001b02 <I2C_MasterTransmit_TXE+0x130>
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b21      	cmp	r3, #33	; 0x21
 8001b22:	d164      	bne.n	8001bee <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d012      	beq.n	8001b54 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001b52:	e04c      	b.n	8001bee <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d01d      	beq.n	8001b96 <I2C_MasterTransmit_BTF+0x8c>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d01a      	beq.n	8001b96 <I2C_MasterTransmit_BTF+0x8c>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b66:	d016      	beq.n	8001b96 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b76:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2211      	movs	r2, #17
 8001b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fee9 	bl	8001966 <HAL_I2C_MasterTxCpltCallback>
}
 8001b94:	e02b      	b.n	8001bee <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ba4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b40      	cmp	r3, #64	; 0x40
 8001bce:	d107      	bne.n	8001be0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff fedf 	bl	800199c <HAL_I2C_MemTxCpltCallback>
}
 8001bde:	e006      	b.n	8001bee <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff febc 	bl	8001966 <HAL_I2C_MasterTxCpltCallback>
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11d      	bne.n	8001c4a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d10b      	bne.n	8001c2e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c26:	1c9a      	adds	r2, r3, #2
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001c2c:	e077      	b.n	8001d1e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	121b      	asrs	r3, r3, #8
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c48:	e069      	b.n	8001d1e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d10b      	bne.n	8001c6a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c68:	e059      	b.n	8001d1e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d152      	bne.n	8001d18 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b22      	cmp	r3, #34	; 0x22
 8001c76:	d10d      	bne.n	8001c94 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c86:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c92:	e044      	b.n	8001d1e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d015      	beq.n	8001cca <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	2b21      	cmp	r3, #33	; 0x21
 8001ca2:	d112      	bne.n	8001cca <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	781a      	ldrb	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001cc8:	e029      	b.n	8001d1e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d124      	bne.n	8001d1e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b21      	cmp	r3, #33	; 0x21
 8001cd8:	d121      	bne.n	8001d1e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ce8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fe43 	bl	800199c <HAL_I2C_MemTxCpltCallback>
}
 8001d16:	e002      	b.n	8001d1e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff fb49 	bl	80013b0 <I2C_Flush_DR>
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b22      	cmp	r3, #34	; 0x22
 8001d38:	f040 80b9 	bne.w	8001eae <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d921      	bls.n	8001d94 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	f040 8096 	bne.w	8001eae <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d90:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001d92:	e08c      	b.n	8001eae <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d07f      	beq.n	8001e9c <I2C_MasterReceive_RXNE+0x176>
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d002      	beq.n	8001da8 <I2C_MasterReceive_RXNE+0x82>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d179      	bne.n	8001e9c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f001 f843 	bl	8002e34 <I2C_WaitOnSTOPRequestThroughIT>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d14c      	bne.n	8001e4e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dd2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b40      	cmp	r3, #64	; 0x40
 8001e0c:	d10a      	bne.n	8001e24 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff fdc6 	bl	80019ae <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e22:	e044      	b.n	8001eae <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d002      	beq.n	8001e38 <I2C_MasterReceive_RXNE+0x112>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d103      	bne.n	8001e40 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e3e:	e002      	b.n	8001e46 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2212      	movs	r2, #18
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fd96 	bl	8001978 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e4c:	e02f      	b.n	8001eae <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e5c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f002 fb52 	bl	800453e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e9a:	e008      	b.n	8001eae <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eaa:	605a      	str	r2, [r3, #4]
}
 8001eac:	e7ff      	b.n	8001eae <I2C_MasterReceive_RXNE+0x188>
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d11b      	bne.n	8001f06 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001edc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001f04:	e0c4      	b.n	8002090 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d129      	bne.n	8001f64 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f1e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d00a      	beq.n	8001f3c <I2C_MasterReceive_BTF+0x86>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d007      	beq.n	8001f3c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f62:	e095      	b.n	8002090 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d17d      	bne.n	800206a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d002      	beq.n	8001f7a <I2C_MasterReceive_BTF+0xc4>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d108      	bne.n	8001f8c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e016      	b.n	8001fba <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d002      	beq.n	8001f98 <I2C_MasterReceive_BTF+0xe2>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d108      	bne.n	8001faa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e007      	b.n	8001fba <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002014:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b40      	cmp	r3, #64	; 0x40
 8002028:	d10a      	bne.n	8002040 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fcb8 	bl	80019ae <HAL_I2C_MemRxCpltCallback>
}
 800203e:	e027      	b.n	8002090 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b08      	cmp	r3, #8
 800204c:	d002      	beq.n	8002054 <I2C_MasterReceive_BTF+0x19e>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b20      	cmp	r3, #32
 8002052:	d103      	bne.n	800205c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
 800205a:	e002      	b.n	8002062 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2212      	movs	r2, #18
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fc88 	bl	8001978 <HAL_I2C_MasterRxCpltCallback>
}
 8002068:	e012      	b.n	8002090 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b40      	cmp	r3, #64	; 0x40
 80020aa:	d117      	bne.n	80020dc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020c4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80020c6:	e067      	b.n	8002198 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	611a      	str	r2, [r3, #16]
}
 80020da:	e05d      	b.n	8002198 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020e4:	d133      	bne.n	800214e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b21      	cmp	r3, #33	; 0x21
 80020f0:	d109      	bne.n	8002106 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002102:	611a      	str	r2, [r3, #16]
 8002104:	e008      	b.n	8002118 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	b2da      	uxtb	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <I2C_Master_SB+0x92>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	2b00      	cmp	r3, #0
 8002128:	d108      	bne.n	800213c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	2b00      	cmp	r3, #0
 8002130:	d032      	beq.n	8002198 <I2C_Master_SB+0x100>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02d      	beq.n	8002198 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800214a:	605a      	str	r2, [r3, #4]
}
 800214c:	e024      	b.n	8002198 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10e      	bne.n	8002174 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	b29b      	uxth	r3, r3
 800215c:	11db      	asrs	r3, r3, #7
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f003 0306 	and.w	r3, r3, #6
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f063 030f 	orn	r3, r3, #15
 800216a:	b2da      	uxtb	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	611a      	str	r2, [r3, #16]
}
 8002172:	e011      	b.n	8002198 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002178:	2b01      	cmp	r3, #1
 800217a:	d10d      	bne.n	8002198 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	b29b      	uxth	r3, r3
 8002182:	11db      	asrs	r3, r3, #7
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f003 0306 	and.w	r3, r3, #6
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f063 030e 	orn	r3, r3, #14
 8002190:	b2da      	uxtb	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	611a      	str	r2, [r3, #16]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <I2C_Master_ADD10+0x26>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d108      	bne.n	80021da <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00c      	beq.n	80021ea <I2C_Master_ADD10+0x48>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e8:	605a      	str	r2, [r3, #4]
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b091      	sub	sp, #68	; 0x44
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002202:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b22      	cmp	r3, #34	; 0x22
 800221c:	f040 8174 	bne.w	8002508 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10f      	bne.n	8002248 <I2C_Master_ADDR+0x54>
 8002228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800222c:	2b40      	cmp	r3, #64	; 0x40
 800222e:	d10b      	bne.n	8002248 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002230:	2300      	movs	r3, #0
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	e16b      	b.n	8002520 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224c:	2b00      	cmp	r3, #0
 800224e:	d11d      	bne.n	800228c <I2C_Master_ADDR+0x98>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002258:	d118      	bne.n	800228c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800227e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	651a      	str	r2, [r3, #80]	; 0x50
 800228a:	e149      	b.n	8002520 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d113      	bne.n	80022be <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e120      	b.n	8002500 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	f040 808a 	bne.w	80023de <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80022ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022d0:	d137      	bne.n	8002342 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022f0:	d113      	bne.n	800231a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002300:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	e0f2      	b.n	8002500 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	623b      	str	r3, [r7, #32]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	623b      	str	r3, [r7, #32]
 800232e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e0de      	b.n	8002500 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002344:	2b08      	cmp	r3, #8
 8002346:	d02e      	beq.n	80023a6 <I2C_Master_ADDR+0x1b2>
 8002348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234a:	2b20      	cmp	r3, #32
 800234c:	d02b      	beq.n	80023a6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002350:	2b12      	cmp	r3, #18
 8002352:	d102      	bne.n	800235a <I2C_Master_ADDR+0x166>
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	2b01      	cmp	r3, #1
 8002358:	d125      	bne.n	80023a6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	2b04      	cmp	r3, #4
 800235e:	d00e      	beq.n	800237e <I2C_Master_ADDR+0x18a>
 8002360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002362:	2b02      	cmp	r3, #2
 8002364:	d00b      	beq.n	800237e <I2C_Master_ADDR+0x18a>
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	2b10      	cmp	r3, #16
 800236a:	d008      	beq.n	800237e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e007      	b.n	800238e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800238c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	e0ac      	b.n	8002500 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e090      	b.n	8002500 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d158      	bne.n	800249a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d021      	beq.n	8002432 <I2C_Master_ADDR+0x23e>
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d01e      	beq.n	8002432 <I2C_Master_ADDR+0x23e>
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d01b      	beq.n	8002432 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002408:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e012      	b.n	8002458 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002440:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002466:	d14b      	bne.n	8002500 <I2C_Master_ADDR+0x30c>
 8002468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800246e:	d00b      	beq.n	8002488 <I2C_Master_ADDR+0x294>
 8002470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002472:	2b01      	cmp	r3, #1
 8002474:	d008      	beq.n	8002488 <I2C_Master_ADDR+0x294>
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	2b08      	cmp	r3, #8
 800247a:	d005      	beq.n	8002488 <I2C_Master_ADDR+0x294>
 800247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247e:	2b10      	cmp	r3, #16
 8002480:	d002      	beq.n	8002488 <I2C_Master_ADDR+0x294>
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	2b20      	cmp	r3, #32
 8002486:	d13b      	bne.n	8002500 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	e032      	b.n	8002500 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024b8:	d117      	bne.n	80024ea <I2C_Master_ADDR+0x2f6>
 80024ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024c0:	d00b      	beq.n	80024da <I2C_Master_ADDR+0x2e6>
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d008      	beq.n	80024da <I2C_Master_ADDR+0x2e6>
 80024c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d005      	beq.n	80024da <I2C_Master_ADDR+0x2e6>
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d002      	beq.n	80024da <I2C_Master_ADDR+0x2e6>
 80024d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d107      	bne.n	80024ea <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002506:	e00b      	b.n	8002520 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
}
 800251e:	e7ff      	b.n	8002520 <I2C_Master_ADDR+0x32c>
 8002520:	bf00      	nop
 8002522:	3744      	adds	r7, #68	; 0x44
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02b      	beq.n	800259c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d114      	bne.n	800259c <I2C_SlaveTransmit_TXE+0x72>
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b29      	cmp	r3, #41	; 0x29
 8002576:	d111      	bne.n	800259c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002586:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2221      	movs	r2, #33	; 0x21
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2228      	movs	r2, #40	; 0x28
 8002592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff f9f7 	bl	800198a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d011      	beq.n	80025da <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d02c      	beq.n	8002658 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d114      	bne.n	8002658 <I2C_SlaveReceive_RXNE+0x74>
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b2a      	cmp	r3, #42	; 0x2a
 8002632:	d111      	bne.n	8002658 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002642:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2222      	movs	r2, #34	; 0x22
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2228      	movs	r2, #40	; 0x28
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f001 ff6a 	bl	800452c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d012      	beq.n	8002698 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026bc:	2b28      	cmp	r3, #40	; 0x28
 80026be:	d127      	bne.n	8002710 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	09db      	lsrs	r3, r3, #7
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d103      	bne.n	80026f4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	81bb      	strh	r3, [r7, #12]
 80026f2:	e002      	b.n	80026fa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002702:	89ba      	ldrh	r2, [r7, #12]
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f001 fef5 	bl	80044f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800270e:	e00e      	b.n	800272e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002746:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002756:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002784:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002794:	d172      	bne.n	800287c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b22      	cmp	r3, #34	; 0x22
 800279a:	d002      	beq.n	80027a2 <I2C_Slave_STOPF+0x6a>
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b2a      	cmp	r3, #42	; 0x2a
 80027a0:	d135      	bne.n	800280e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f043 0204 	orr.w	r2, r3, #4
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fae2 	bl	8000da4 <HAL_DMA_GetState>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d049      	beq.n	800287a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	4a69      	ldr	r2, [pc, #420]	; (8002990 <I2C_Slave_STOPF+0x258>)
 80027ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fa5e 	bl	8000cb4 <HAL_DMA_Abort_IT>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d03d      	beq.n	800287a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002808:	4610      	mov	r0, r2
 800280a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800280c:	e035      	b.n	800287a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	b29a      	uxth	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f043 0204 	orr.w	r2, r3, #4
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002840:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe faac 	bl	8000da4 <HAL_DMA_GetState>
 800284c:	4603      	mov	r3, r0
 800284e:	2b01      	cmp	r3, #1
 8002850:	d014      	beq.n	800287c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	4a4e      	ldr	r2, [pc, #312]	; (8002990 <I2C_Slave_STOPF+0x258>)
 8002858:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fa28 	bl	8000cb4 <HAL_DMA_Abort_IT>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002874:	4610      	mov	r0, r2
 8002876:	4798      	blx	r3
 8002878:	e000      	b.n	800287c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800287a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d03e      	beq.n	8002904 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b04      	cmp	r3, #4
 8002892:	d112      	bne.n	80028ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d112      	bne.n	80028ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f043 0204 	orr.w	r2, r3, #4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f8b7 	bl	8002a80 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002912:	e039      	b.n	8002988 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b2a      	cmp	r3, #42	; 0x2a
 8002918:	d109      	bne.n	800292e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2228      	movs	r2, #40	; 0x28
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f001 fdff 	bl	800452c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b28      	cmp	r3, #40	; 0x28
 8002938:	d111      	bne.n	800295e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <I2C_Slave_STOPF+0x25c>)
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f001 fdc2 	bl	80044e0 <HAL_I2C_ListenCpltCallback>
}
 800295c:	e014      	b.n	8002988 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	2b22      	cmp	r3, #34	; 0x22
 8002964:	d002      	beq.n	800296c <I2C_Slave_STOPF+0x234>
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b22      	cmp	r3, #34	; 0x22
 800296a:	d10d      	bne.n	8002988 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f001 fdd2 	bl	800452c <HAL_I2C_SlaveRxCpltCallback>
}
 8002988:	bf00      	nop
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	08002ce5 	.word	0x08002ce5
 8002994:	ffff0000 	.word	0xffff0000

08002998 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d002      	beq.n	80029ba <I2C_Slave_AF+0x22>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d129      	bne.n	8002a0e <I2C_Slave_AF+0x76>
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b28      	cmp	r3, #40	; 0x28
 80029be:	d126      	bne.n	8002a0e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a2e      	ldr	r2, [pc, #184]	; (8002a7c <I2C_Slave_AF+0xe4>)
 80029c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029d4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029de:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f001 fd6a 	bl	80044e0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002a0c:	e031      	b.n	8002a72 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	2b21      	cmp	r3, #33	; 0x21
 8002a12:	d129      	bne.n	8002a68 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <I2C_Slave_AF+0xe4>)
 8002a18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2221      	movs	r2, #33	; 0x21
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a3e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a48:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a58:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe fca8 	bl	80013b0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7fe ff92 	bl	800198a <HAL_I2C_SlaveTxCpltCallback>
}
 8002a66:	e004      	b.n	8002a72 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a70:	615a      	str	r2, [r3, #20]
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	ffff0000 	.word	0xffff0000

08002a80 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a96:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a98:	7bbb      	ldrb	r3, [r7, #14]
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d002      	beq.n	8002aa4 <I2C_ITError+0x24>
 8002a9e:	7bbb      	ldrb	r3, [r7, #14]
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d10a      	bne.n	8002aba <I2C_ITError+0x3a>
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b22      	cmp	r3, #34	; 0x22
 8002aa8:	d107      	bne.n	8002aba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ac0:	2b28      	cmp	r3, #40	; 0x28
 8002ac2:	d107      	bne.n	8002ad4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2228      	movs	r2, #40	; 0x28
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ad2:	e015      	b.n	8002b00 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae2:	d00a      	beq.n	8002afa <I2C_ITError+0x7a>
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b60      	cmp	r3, #96	; 0x60
 8002ae8:	d007      	beq.n	8002afa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b0e:	d162      	bne.n	8002bd6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b1e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d020      	beq.n	8002b70 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <I2C_ITError+0x25c>)
 8002b34:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe f8ba 	bl	8000cb4 <HAL_DMA_Abort_IT>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 8089 	beq.w	8002c5a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4798      	blx	r3
 8002b6e:	e074      	b.n	8002c5a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	4a59      	ldr	r2, [pc, #356]	; (8002cdc <I2C_ITError+0x25c>)
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe f899 	bl	8000cb4 <HAL_DMA_Abort_IT>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d068      	beq.n	8002c5a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b92:	2b40      	cmp	r3, #64	; 0x40
 8002b94:	d10b      	bne.n	8002bae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4798      	blx	r3
 8002bd4:	e041      	b.n	8002c5a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b60      	cmp	r3, #96	; 0x60
 8002be0:	d125      	bne.n	8002c2e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d10b      	bne.n	8002c16 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0201 	bic.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe feca 	bl	80019c0 <HAL_I2C_AbortCpltCallback>
 8002c2c:	e015      	b.n	8002c5a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d10b      	bne.n	8002c54 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f001 fc72 	bl	800453e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10e      	bne.n	8002c88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d007      	beq.n	8002c98 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c96:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d113      	bne.n	8002cd4 <I2C_ITError+0x254>
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b28      	cmp	r3, #40	; 0x28
 8002cb0:	d110      	bne.n	8002cd4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <I2C_ITError+0x260>)
 8002cb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f001 fc06 	bl	80044e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	08002ce5 	.word	0x08002ce5
 8002ce0:	ffff0000 	.word	0xffff0000

08002ce4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cfe:	4b4b      	ldr	r3, [pc, #300]	; (8002e2c <I2C_DMAAbort+0x148>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	08db      	lsrs	r3, r3, #3
 8002d04:	4a4a      	ldr	r2, [pc, #296]	; (8002e30 <I2C_DMAAbort+0x14c>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	0a1a      	lsrs	r2, r3, #8
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	00da      	lsls	r2, r3, #3
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0220 	orr.w	r2, r3, #32
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002d2a:	e00a      	b.n	8002d42 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d40:	d0ea      	beq.n	8002d18 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	2200      	movs	r2, #0
 8002d50:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	2200      	movs	r2, #0
 8002d60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d70:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2200      	movs	r2, #0
 8002d76:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	2200      	movs	r2, #0
 8002d86:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	2200      	movs	r2, #0
 8002d96:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b60      	cmp	r3, #96	; 0x60
 8002db2:	d10e      	bne.n	8002dd2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f7fe fdf8 	bl	80019c0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002dd0:	e027      	b.n	8002e22 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dd8:	2b28      	cmp	r3, #40	; 0x28
 8002dda:	d117      	bne.n	8002e0c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dfa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2228      	movs	r2, #40	; 0x28
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e0a:	e007      	b.n	8002e1c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002e1c:	6978      	ldr	r0, [r7, #20]
 8002e1e:	f001 fb8e 	bl	800453e <HAL_I2C_ErrorCallback>
}
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000014 	.word	0x20000014
 8002e30:	14f8b589 	.word	0x14f8b589

08002e34 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	08db      	lsrs	r3, r3, #3
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	0a1a      	lsrs	r2, r3, #8
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d107      	bne.n	8002e72 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e008      	b.n	8002e84 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e80:	d0e9      	beq.n	8002e56 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000014 	.word	0x20000014
 8002e94:	14f8b589 	.word	0x14f8b589

08002e98 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ea8:	d103      	bne.n	8002eb2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002eb0:	e007      	b.n	8002ec2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002eba:	d102      	bne.n	8002ec2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2208      	movs	r2, #8
 8002ec0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e26c      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8087 	beq.w	8002ffa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eec:	4b92      	ldr	r3, [pc, #584]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d00c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ef8:	4b8f      	ldr	r3, [pc, #572]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d112      	bne.n	8002f2a <HAL_RCC_OscConfig+0x5e>
 8002f04:	4b8c      	ldr	r3, [pc, #560]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f10:	d10b      	bne.n	8002f2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f12:	4b89      	ldr	r3, [pc, #548]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d06c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x12c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d168      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e246      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x76>
 8002f34:	4b80      	ldr	r3, [pc, #512]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a7f      	ldr	r2, [pc, #508]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	e02e      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd4>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x98>
 8002f4a:	4b7b      	ldr	r3, [pc, #492]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7a      	ldr	r2, [pc, #488]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b78      	ldr	r3, [pc, #480]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a77      	ldr	r2, [pc, #476]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e01d      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd4>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0xbc>
 8002f6e:	4b72      	ldr	r3, [pc, #456]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a71      	ldr	r2, [pc, #452]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b6f      	ldr	r3, [pc, #444]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6e      	ldr	r2, [pc, #440]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd4>
 8002f88:	4b6b      	ldr	r3, [pc, #428]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6a      	ldr	r2, [pc, #424]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b68      	ldr	r3, [pc, #416]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a67      	ldr	r2, [pc, #412]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fd fd6c 	bl	8000a84 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fd fd68 	bl	8000a84 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1fa      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xe4>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fd fd58 	bl	8000a84 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fd fd54 	bl	8000a84 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1e6      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x10c>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d063      	beq.n	80030ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003006:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003012:	4b49      	ldr	r3, [pc, #292]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b08      	cmp	r3, #8
 800301c:	d11c      	bne.n	8003058 <HAL_RCC_OscConfig+0x18c>
 800301e:	4b46      	ldr	r3, [pc, #280]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_RCC_OscConfig+0x176>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e1ba      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4939      	ldr	r1, [pc, #228]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	e03a      	b.n	80030ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003060:	4b36      	ldr	r3, [pc, #216]	; (800313c <HAL_RCC_OscConfig+0x270>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7fd fd0d 	bl	8000a84 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306e:	f7fd fd09 	bl	8000a84 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e19b      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308c:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4927      	ldr	r1, [pc, #156]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a2:	4b26      	ldr	r3, [pc, #152]	; (800313c <HAL_RCC_OscConfig+0x270>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fd fcec 	bl	8000a84 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b0:	f7fd fce8 	bl	8000a84 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e17a      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d03a      	beq.n	8003150 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d019      	beq.n	8003116 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e8:	f7fd fccc 	bl	8000a84 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f0:	f7fd fcc8 	bl	8000a84 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e15a      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_RCC_OscConfig+0x26c>)
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800310e:	2001      	movs	r0, #1
 8003110:	f000 fab8 	bl	8003684 <RCC_Delay>
 8003114:	e01c      	b.n	8003150 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_RCC_OscConfig+0x274>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311c:	f7fd fcb2 	bl	8000a84 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003122:	e00f      	b.n	8003144 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003124:	f7fd fcae 	bl	8000a84 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d908      	bls.n	8003144 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e140      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	42420000 	.word	0x42420000
 8003140:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	4b9e      	ldr	r3, [pc, #632]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e9      	bne.n	8003124 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80a6 	beq.w	80032aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003162:	4b97      	ldr	r3, [pc, #604]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10d      	bne.n	800318a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	4b94      	ldr	r3, [pc, #592]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	4a93      	ldr	r2, [pc, #588]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003178:	61d3      	str	r3, [r2, #28]
 800317a:	4b91      	ldr	r3, [pc, #580]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003186:	2301      	movs	r3, #1
 8003188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318a:	4b8e      	ldr	r3, [pc, #568]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d118      	bne.n	80031c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003196:	4b8b      	ldr	r3, [pc, #556]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a8a      	ldr	r2, [pc, #552]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 800319c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a2:	f7fd fc6f 	bl	8000a84 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031aa:	f7fd fc6b 	bl	8000a84 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b64      	cmp	r3, #100	; 0x64
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0fd      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031bc:	4b81      	ldr	r3, [pc, #516]	; (80033c4 <HAL_RCC_OscConfig+0x4f8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d106      	bne.n	80031de <HAL_RCC_OscConfig+0x312>
 80031d0:	4b7b      	ldr	r3, [pc, #492]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a7a      	ldr	r2, [pc, #488]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	e02d      	b.n	800323a <HAL_RCC_OscConfig+0x36e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0x334>
 80031e6:	4b76      	ldr	r3, [pc, #472]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4a75      	ldr	r2, [pc, #468]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	6213      	str	r3, [r2, #32]
 80031f2:	4b73      	ldr	r3, [pc, #460]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4a72      	ldr	r2, [pc, #456]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 80031f8:	f023 0304 	bic.w	r3, r3, #4
 80031fc:	6213      	str	r3, [r2, #32]
 80031fe:	e01c      	b.n	800323a <HAL_RCC_OscConfig+0x36e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b05      	cmp	r3, #5
 8003206:	d10c      	bne.n	8003222 <HAL_RCC_OscConfig+0x356>
 8003208:	4b6d      	ldr	r3, [pc, #436]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a6c      	ldr	r2, [pc, #432]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	4b6a      	ldr	r3, [pc, #424]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4a69      	ldr	r2, [pc, #420]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	e00b      	b.n	800323a <HAL_RCC_OscConfig+0x36e>
 8003222:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a66      	ldr	r2, [pc, #408]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6213      	str	r3, [r2, #32]
 800322e:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4a63      	ldr	r2, [pc, #396]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d015      	beq.n	800326e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003242:	f7fd fc1f 	bl	8000a84 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	e00a      	b.n	8003260 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7fd fc1b 	bl	8000a84 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	; 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0ab      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003260:	4b57      	ldr	r3, [pc, #348]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0ee      	beq.n	800324a <HAL_RCC_OscConfig+0x37e>
 800326c:	e014      	b.n	8003298 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7fd fc09 	bl	8000a84 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fd fc05 	bl	8000a84 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e095      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328c:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ee      	bne.n	8003276 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d105      	bne.n	80032aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329e:	4b48      	ldr	r3, [pc, #288]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4a47      	ldr	r2, [pc, #284]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 80032a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8081 	beq.w	80033b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b4:	4b42      	ldr	r3, [pc, #264]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d061      	beq.n	8003384 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d146      	bne.n	8003356 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c8:	4b3f      	ldr	r3, [pc, #252]	; (80033c8 <HAL_RCC_OscConfig+0x4fc>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7fd fbd9 	bl	8000a84 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fd fbd5 	bl	8000a84 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e067      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e8:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fc:	d108      	bne.n	8003310 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032fe:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	492d      	ldr	r1, [pc, #180]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003310:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a19      	ldr	r1, [r3, #32]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	430b      	orrs	r3, r1
 8003322:	4927      	ldr	r1, [pc, #156]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003328:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <HAL_RCC_OscConfig+0x4fc>)
 800332a:	2201      	movs	r2, #1
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332e:	f7fd fba9 	bl	8000a84 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003336:	f7fd fba5 	bl	8000a84 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e037      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x46a>
 8003354:	e02f      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003356:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <HAL_RCC_OscConfig+0x4fc>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7fd fb92 	bl	8000a84 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003364:	f7fd fb8e 	bl	8000a84 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e020      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x498>
 8003382:	e018      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e013      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCC_OscConfig+0x4f4>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d106      	bne.n	80033b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40007000 	.word	0x40007000
 80033c8:	42420060 	.word	0x42420060

080033cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0d0      	b.n	8003582 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b6a      	ldr	r3, [pc, #424]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d910      	bls.n	8003410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b67      	ldr	r3, [pc, #412]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 0207 	bic.w	r2, r3, #7
 80033f6:	4965      	ldr	r1, [pc, #404]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b63      	ldr	r3, [pc, #396]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0b8      	b.n	8003582 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d020      	beq.n	800345e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003428:	4b59      	ldr	r3, [pc, #356]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a58      	ldr	r2, [pc, #352]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003432:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003440:	4b53      	ldr	r3, [pc, #332]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a52      	ldr	r2, [pc, #328]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800344a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800344c:	4b50      	ldr	r3, [pc, #320]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	494d      	ldr	r1, [pc, #308]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d040      	beq.n	80034ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	4b47      	ldr	r3, [pc, #284]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d115      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e07f      	b.n	8003582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	4b41      	ldr	r3, [pc, #260]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e073      	b.n	8003582 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e06b      	b.n	8003582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034aa:	4b39      	ldr	r3, [pc, #228]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4936      	ldr	r1, [pc, #216]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034bc:	f7fd fae2 	bl	8000a84 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fd fade 	bl	8000a84 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e053      	b.n	8003582 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b2d      	ldr	r3, [pc, #180]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 020c 	and.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1eb      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ec:	4b27      	ldr	r3, [pc, #156]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d210      	bcs.n	800351c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 0207 	bic.w	r2, r3, #7
 8003502:	4922      	ldr	r1, [pc, #136]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	4313      	orrs	r3, r2
 8003508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e032      	b.n	8003582 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003528:	4b19      	ldr	r3, [pc, #100]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4916      	ldr	r1, [pc, #88]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	490e      	ldr	r1, [pc, #56]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800355a:	f000 f821 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 800355e:	4602      	mov	r2, r0
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	490a      	ldr	r1, [pc, #40]	; (8003594 <HAL_RCC_ClockConfig+0x1c8>)
 800356c:	5ccb      	ldrb	r3, [r1, r3]
 800356e:	fa22 f303 	lsr.w	r3, r2, r3
 8003572:	4a09      	ldr	r2, [pc, #36]	; (8003598 <HAL_RCC_ClockConfig+0x1cc>)
 8003574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RCC_ClockConfig+0x1d0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fa40 	bl	8000a00 <HAL_InitTick>

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40022000 	.word	0x40022000
 8003590:	40021000 	.word	0x40021000
 8003594:	0800478c 	.word	0x0800478c
 8003598:	20000014 	.word	0x20000014
 800359c:	20000078 	.word	0x20000078

080035a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	2300      	movs	r3, #0
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	2300      	movs	r3, #0
 80035b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <HAL_RCC_GetSysClockFreq+0x94>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x30>
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0x36>
 80035ce:	e027      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_RCC_GetSysClockFreq+0x98>)
 80035d2:	613b      	str	r3, [r7, #16]
      break;
 80035d4:	e027      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	0c9b      	lsrs	r3, r3, #18
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	4a17      	ldr	r2, [pc, #92]	; (800363c <HAL_RCC_GetSysClockFreq+0x9c>)
 80035e0:	5cd3      	ldrb	r3, [r2, r3]
 80035e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d010      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <HAL_RCC_GetSysClockFreq+0x94>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	0c5b      	lsrs	r3, r3, #17
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	4a11      	ldr	r2, [pc, #68]	; (8003640 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035fa:	5cd3      	ldrb	r3, [r2, r3]
 80035fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a0d      	ldr	r2, [pc, #52]	; (8003638 <HAL_RCC_GetSysClockFreq+0x98>)
 8003602:	fb02 f203 	mul.w	r2, r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	fbb2 f3f3 	udiv	r3, r2, r3
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	e004      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a0c      	ldr	r2, [pc, #48]	; (8003644 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003614:	fb02 f303 	mul.w	r3, r2, r3
 8003618:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	613b      	str	r3, [r7, #16]
      break;
 800361e:	e002      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetSysClockFreq+0x98>)
 8003622:	613b      	str	r3, [r7, #16]
      break;
 8003624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003626:	693b      	ldr	r3, [r7, #16]
}
 8003628:	4618      	mov	r0, r3
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	007a1200 	.word	0x007a1200
 800363c:	080047a4 	.word	0x080047a4
 8003640:	080047b4 	.word	0x080047b4
 8003644:	003d0900 	.word	0x003d0900

08003648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800364c:	4b02      	ldr	r3, [pc, #8]	; (8003658 <HAL_RCC_GetHCLKFreq+0x10>)
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	20000014 	.word	0x20000014

0800365c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003660:	f7ff fff2 	bl	8003648 <HAL_RCC_GetHCLKFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	4903      	ldr	r1, [pc, #12]	; (8003680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000
 8003680:	0800479c 	.word	0x0800479c

08003684 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <RCC_Delay+0x34>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <RCC_Delay+0x38>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	0a5b      	lsrs	r3, r3, #9
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036a0:	bf00      	nop
  }
  while (Delay --);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1e5a      	subs	r2, r3, #1
 80036a6:	60fa      	str	r2, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f9      	bne.n	80036a0 <RCC_Delay+0x1c>
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	20000014 	.word	0x20000014
 80036bc:	10624dd3 	.word	0x10624dd3

080036c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e041      	b.n	8003756 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fc ff42 	bl	8000570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3304      	adds	r3, #4
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f000 fa5c 	bl	8003bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b01      	cmp	r3, #1
 8003772:	d001      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e03a      	b.n	80037ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <HAL_TIM_Base_Start_IT+0x98>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00e      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x58>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a2:	d009      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x58>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a14      	ldr	r2, [pc, #80]	; (80037fc <HAL_TIM_Base_Start_IT+0x9c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x58>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a13      	ldr	r2, [pc, #76]	; (8003800 <HAL_TIM_Base_Start_IT+0xa0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d111      	bne.n	80037dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b06      	cmp	r3, #6
 80037c8:	d010      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0201 	orr.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037da:	e007      	b.n	80037ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800

08003804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d020      	beq.n	8003868 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01b      	beq.n	8003868 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0202 	mvn.w	r2, #2
 8003838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f998 	bl	8003b84 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f98b 	bl	8003b72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f99a 	bl	8003b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d020      	beq.n	80038b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01b      	beq.n	80038b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0204 	mvn.w	r2, #4
 8003884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f972 	bl	8003b84 <HAL_TIM_IC_CaptureCallback>
 80038a0:	e005      	b.n	80038ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f965 	bl	8003b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f974 	bl	8003b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d020      	beq.n	8003900 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01b      	beq.n	8003900 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0208 	mvn.w	r2, #8
 80038d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2204      	movs	r2, #4
 80038d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f94c 	bl	8003b84 <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f93f 	bl	8003b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f94e 	bl	8003b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d020      	beq.n	800394c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01b      	beq.n	800394c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0210 	mvn.w	r2, #16
 800391c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2208      	movs	r2, #8
 8003922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f926 	bl	8003b84 <HAL_TIM_IC_CaptureCallback>
 8003938:	e005      	b.n	8003946 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f919 	bl	8003b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f928 	bl	8003b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0201 	mvn.w	r2, #1
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fc fd56 	bl	800041c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00c      	beq.n	8003994 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fa7f 	bl	8003e92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8f8 	bl	8003ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0220 	mvn.w	r2, #32
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa52 	bl	8003e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_TIM_ConfigClockSource+0x1c>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e0b4      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x186>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a38:	d03e      	beq.n	8003ab8 <HAL_TIM_ConfigClockSource+0xd4>
 8003a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a3e:	f200 8087 	bhi.w	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a46:	f000 8086 	beq.w	8003b56 <HAL_TIM_ConfigClockSource+0x172>
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4e:	d87f      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b70      	cmp	r3, #112	; 0x70
 8003a52:	d01a      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0xa6>
 8003a54:	2b70      	cmp	r3, #112	; 0x70
 8003a56:	d87b      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a58:	2b60      	cmp	r3, #96	; 0x60
 8003a5a:	d050      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x11a>
 8003a5c:	2b60      	cmp	r3, #96	; 0x60
 8003a5e:	d877      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a60:	2b50      	cmp	r3, #80	; 0x50
 8003a62:	d03c      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0xfa>
 8003a64:	2b50      	cmp	r3, #80	; 0x50
 8003a66:	d873      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d058      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x13a>
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d86f      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a70:	2b30      	cmp	r3, #48	; 0x30
 8003a72:	d064      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x15a>
 8003a74:	2b30      	cmp	r3, #48	; 0x30
 8003a76:	d86b      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d060      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x15a>
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d867      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d05c      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x15a>
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d05a      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x15a>
 8003a88:	e062      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6899      	ldr	r1, [r3, #8]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f000 f974 	bl	8003d86 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	609a      	str	r2, [r3, #8]
      break;
 8003ab6:	e04f      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	6899      	ldr	r1, [r3, #8]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f000 f95d 	bl	8003d86 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ada:	609a      	str	r2, [r3, #8]
      break;
 8003adc:	e03c      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f000 f8d4 	bl	8003c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2150      	movs	r1, #80	; 0x50
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f92b 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 8003afc:	e02c      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6859      	ldr	r1, [r3, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f000 f8f2 	bl	8003cf4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2160      	movs	r1, #96	; 0x60
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f91b 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 8003b1c:	e01c      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6859      	ldr	r1, [r3, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f000 f8b4 	bl	8003c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2140      	movs	r1, #64	; 0x40
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 f90b 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 8003b3c:	e00c      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f000 f902 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 8003b4e:	e003      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      break;
 8003b54:	e000      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
	...

08003bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a2f      	ldr	r2, [pc, #188]	; (8003c8c <TIM_Base_SetConfig+0xd0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00b      	beq.n	8003bec <TIM_Base_SetConfig+0x30>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bda:	d007      	beq.n	8003bec <TIM_Base_SetConfig+0x30>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a2c      	ldr	r2, [pc, #176]	; (8003c90 <TIM_Base_SetConfig+0xd4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_Base_SetConfig+0x30>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a2b      	ldr	r2, [pc, #172]	; (8003c94 <TIM_Base_SetConfig+0xd8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d108      	bne.n	8003bfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <TIM_Base_SetConfig+0xd0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <TIM_Base_SetConfig+0x62>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0c:	d007      	beq.n	8003c1e <TIM_Base_SetConfig+0x62>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <TIM_Base_SetConfig+0xd4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_Base_SetConfig+0x62>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <TIM_Base_SetConfig+0xd8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d108      	bne.n	8003c30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a0d      	ldr	r2, [pc, #52]	; (8003c8c <TIM_Base_SetConfig+0xd0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d103      	bne.n	8003c64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f023 0201 	bic.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	611a      	str	r2, [r3, #16]
  }
}
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800

08003c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f023 0201 	bic.w	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 030a 	bic.w	r3, r3, #10
 8003cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	621a      	str	r2, [r3, #32]
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f023 0210 	bic.w	r2, r3, #16
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	031b      	lsls	r3, r3, #12
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	621a      	str	r2, [r3, #32]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f043 0307 	orr.w	r3, r3, #7
 8003d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	609a      	str	r2, [r3, #8]
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b087      	sub	sp, #28
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003da0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	021a      	lsls	r2, r3, #8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	609a      	str	r2, [r3, #8]
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e046      	b.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00e      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e28:	d009      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a10      	ldr	r2, [pc, #64]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d10c      	bne.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr
 8003e74:	40012c00 	.word	0x40012c00
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800

08003e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <DISPLAY_LED_7_SEGMENT_PREMIUM>:
	default :
		break;
	}
}

void DISPLAY_LED_7_SEGMENT_PREMIUM(GPIO_TypeDef* GPIOx1[], uint16_t LED1_Pin[], int digit){
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b09      	cmp	r3, #9
 8003eb4:	f200 82ca 	bhi.w	800444c <DISPLAY_LED_7_SEGMENT_PREMIUM+0x5a8>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <DISPLAY_LED_7_SEGMENT_PREMIUM+0x1c>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ee9 	.word	0x08003ee9
 8003ec4:	08003f73 	.word	0x08003f73
 8003ec8:	08003ffd 	.word	0x08003ffd
 8003ecc:	08004087 	.word	0x08004087
 8003ed0:	08004111 	.word	0x08004111
 8003ed4:	0800419b 	.word	0x0800419b
 8003ed8:	08004225 	.word	0x08004225
 8003edc:	080042af 	.word	0x080042af
 8003ee0:	08004339 	.word	0x08004339
 8003ee4:	080043c3 	.word	0x080043c3
    switch(digit){
        case 0:
            HAL_GPIO_WritePin(GPIOx1[0], LED1_Pin[0], RESET);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f7fd f8ff 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[1], LED1_Pin[1], RESET);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3304      	adds	r3, #4
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	3302      	adds	r3, #2
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	2200      	movs	r2, #0
 8003f06:	4619      	mov	r1, r3
 8003f08:	f7fd f8f5 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[2], LED1_Pin[2], RESET);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3308      	adds	r3, #8
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3304      	adds	r3, #4
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	f7fd f8eb 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[3], LED1_Pin[3], RESET);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	330c      	adds	r3, #12
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	3306      	adds	r3, #6
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4619      	mov	r1, r3
 8003f30:	f7fd f8e1 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[4], LED1_Pin[4], RESET);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3310      	adds	r3, #16
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	2200      	movs	r2, #0
 8003f42:	4619      	mov	r1, r3
 8003f44:	f7fd f8d7 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[5], LED1_Pin[5], RESET);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3314      	adds	r3, #20
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	330a      	adds	r3, #10
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	2200      	movs	r2, #0
 8003f56:	4619      	mov	r1, r3
 8003f58:	f7fd f8cd 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[6], LED1_Pin[6], SET);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3318      	adds	r3, #24
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	330c      	adds	r3, #12
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f7fd f8c3 	bl	80010f6 <HAL_GPIO_WritePin>
            break;
 8003f70:	e2b1      	b.n	80044d6 <DISPLAY_LED_7_SEGMENT_PREMIUM+0x632>
        case 1:
            HAL_GPIO_WritePin(GPIOx1[0], LED1_Pin[0], SET);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f7fd f8ba 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[1], LED1_Pin[1], RESET);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3304      	adds	r3, #4
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	3302      	adds	r3, #2
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	4619      	mov	r1, r3
 8003f92:	f7fd f8b0 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[2], LED1_Pin[2], RESET);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3308      	adds	r3, #8
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f7fd f8a6 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[3], LED1_Pin[3], SET);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	330c      	adds	r3, #12
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3306      	adds	r3, #6
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f7fd f89c 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[4], LED1_Pin[4], SET);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3310      	adds	r3, #16
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4619      	mov	r1, r3
 8003fce:	f7fd f892 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[5], LED1_Pin[5], SET);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3314      	adds	r3, #20
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	330a      	adds	r3, #10
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f7fd f888 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[6], LED1_Pin[6], SET);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3318      	adds	r3, #24
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f7fd f87e 	bl	80010f6 <HAL_GPIO_WritePin>
            break;
 8003ffa:	e26c      	b.n	80044d6 <DISPLAY_LED_7_SEGMENT_PREMIUM+0x632>
        case 2:
            HAL_GPIO_WritePin(GPIOx1[0], LED1_Pin[0], RESET);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	2200      	movs	r2, #0
 8004006:	4619      	mov	r1, r3
 8004008:	f7fd f875 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[1], LED1_Pin[1], RESET);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3304      	adds	r3, #4
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3302      	adds	r3, #2
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	2200      	movs	r2, #0
 800401a:	4619      	mov	r1, r3
 800401c:	f7fd f86b 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[2], LED1_Pin[2], SET);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3308      	adds	r3, #8
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	3304      	adds	r3, #4
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	2201      	movs	r2, #1
 800402e:	4619      	mov	r1, r3
 8004030:	f7fd f861 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[3], LED1_Pin[3], RESET);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	330c      	adds	r3, #12
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	3306      	adds	r3, #6
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	2200      	movs	r2, #0
 8004042:	4619      	mov	r1, r3
 8004044:	f7fd f857 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[4], LED1_Pin[4], RESET);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3310      	adds	r3, #16
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3308      	adds	r3, #8
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	2200      	movs	r2, #0
 8004056:	4619      	mov	r1, r3
 8004058:	f7fd f84d 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[5], LED1_Pin[5], SET);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3314      	adds	r3, #20
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	330a      	adds	r3, #10
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	2201      	movs	r2, #1
 800406a:	4619      	mov	r1, r3
 800406c:	f7fd f843 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[6], LED1_Pin[6], RESET);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3318      	adds	r3, #24
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	330c      	adds	r3, #12
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	2200      	movs	r2, #0
 800407e:	4619      	mov	r1, r3
 8004080:	f7fd f839 	bl	80010f6 <HAL_GPIO_WritePin>
            break;
 8004084:	e227      	b.n	80044d6 <DISPLAY_LED_7_SEGMENT_PREMIUM+0x632>
        case 3:
            HAL_GPIO_WritePin(GPIOx1[0], LED1_Pin[0], RESET);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	2200      	movs	r2, #0
 8004090:	4619      	mov	r1, r3
 8004092:	f7fd f830 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[1], LED1_Pin[1], RESET);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3304      	adds	r3, #4
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	3302      	adds	r3, #2
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	2200      	movs	r2, #0
 80040a4:	4619      	mov	r1, r3
 80040a6:	f7fd f826 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[2], LED1_Pin[2], RESET);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3308      	adds	r3, #8
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	3304      	adds	r3, #4
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	2200      	movs	r2, #0
 80040b8:	4619      	mov	r1, r3
 80040ba:	f7fd f81c 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[3], LED1_Pin[3], RESET);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	330c      	adds	r3, #12
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	3306      	adds	r3, #6
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	2200      	movs	r2, #0
 80040cc:	4619      	mov	r1, r3
 80040ce:	f7fd f812 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[4], LED1_Pin[4], SET);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3310      	adds	r3, #16
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	3308      	adds	r3, #8
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	2201      	movs	r2, #1
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7fd f808 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[5], LED1_Pin[5], SET);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3314      	adds	r3, #20
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	330a      	adds	r3, #10
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	2201      	movs	r2, #1
 80040f4:	4619      	mov	r1, r3
 80040f6:	f7fc fffe 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[6], LED1_Pin[6], RESET);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3318      	adds	r3, #24
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	330c      	adds	r3, #12
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	2200      	movs	r2, #0
 8004108:	4619      	mov	r1, r3
 800410a:	f7fc fff4 	bl	80010f6 <HAL_GPIO_WritePin>
            break;
 800410e:	e1e2      	b.n	80044d6 <DISPLAY_LED_7_SEGMENT_PREMIUM+0x632>
        case 4:
            HAL_GPIO_WritePin(GPIOx1[0], LED1_Pin[0], SET);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	2201      	movs	r2, #1
 800411a:	4619      	mov	r1, r3
 800411c:	f7fc ffeb 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[1], LED1_Pin[1], RESET);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3304      	adds	r3, #4
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3302      	adds	r3, #2
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	2200      	movs	r2, #0
 800412e:	4619      	mov	r1, r3
 8004130:	f7fc ffe1 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[2], LED1_Pin[2], RESET);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3308      	adds	r3, #8
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	3304      	adds	r3, #4
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	2200      	movs	r2, #0
 8004142:	4619      	mov	r1, r3
 8004144:	f7fc ffd7 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[3], LED1_Pin[3], SET);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	330c      	adds	r3, #12
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	3306      	adds	r3, #6
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	4619      	mov	r1, r3
 8004158:	f7fc ffcd 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[4], LED1_Pin[4], SET);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3310      	adds	r3, #16
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	3308      	adds	r3, #8
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	2201      	movs	r2, #1
 800416a:	4619      	mov	r1, r3
 800416c:	f7fc ffc3 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[5], LED1_Pin[5], RESET);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3314      	adds	r3, #20
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	330a      	adds	r3, #10
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	4619      	mov	r1, r3
 8004180:	f7fc ffb9 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[6], LED1_Pin[6], RESET);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3318      	adds	r3, #24
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	330c      	adds	r3, #12
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	2200      	movs	r2, #0
 8004192:	4619      	mov	r1, r3
 8004194:	f7fc ffaf 	bl	80010f6 <HAL_GPIO_WritePin>
            break;
 8004198:	e19d      	b.n	80044d6 <DISPLAY_LED_7_SEGMENT_PREMIUM+0x632>
        case 5:
            HAL_GPIO_WritePin(GPIOx1[0], LED1_Pin[0], RESET);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	4619      	mov	r1, r3
 80041a6:	f7fc ffa6 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[1], LED1_Pin[1], SET);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3304      	adds	r3, #4
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	3302      	adds	r3, #2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	2201      	movs	r2, #1
 80041b8:	4619      	mov	r1, r3
 80041ba:	f7fc ff9c 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[2], LED1_Pin[2], RESET);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3308      	adds	r3, #8
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	3304      	adds	r3, #4
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	2200      	movs	r2, #0
 80041cc:	4619      	mov	r1, r3
 80041ce:	f7fc ff92 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[3], LED1_Pin[3], RESET);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	330c      	adds	r3, #12
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	3306      	adds	r3, #6
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	4619      	mov	r1, r3
 80041e2:	f7fc ff88 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[4], LED1_Pin[4], SET);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3310      	adds	r3, #16
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	3308      	adds	r3, #8
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	2201      	movs	r2, #1
 80041f4:	4619      	mov	r1, r3
 80041f6:	f7fc ff7e 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[5], LED1_Pin[5], RESET);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3314      	adds	r3, #20
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	330a      	adds	r3, #10
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	4619      	mov	r1, r3
 800420a:	f7fc ff74 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[6], LED1_Pin[6], RESET);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3318      	adds	r3, #24
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	330c      	adds	r3, #12
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	2200      	movs	r2, #0
 800421c:	4619      	mov	r1, r3
 800421e:	f7fc ff6a 	bl	80010f6 <HAL_GPIO_WritePin>
            break;
 8004222:	e158      	b.n	80044d6 <DISPLAY_LED_7_SEGMENT_PREMIUM+0x632>
        case 6:
            HAL_GPIO_WritePin(GPIOx1[0], LED1_Pin[0], RESET);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	2200      	movs	r2, #0
 800422e:	4619      	mov	r1, r3
 8004230:	f7fc ff61 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[1], LED1_Pin[1], SET);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3304      	adds	r3, #4
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	3302      	adds	r3, #2
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	2201      	movs	r2, #1
 8004242:	4619      	mov	r1, r3
 8004244:	f7fc ff57 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[2], LED1_Pin[2], RESET);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3308      	adds	r3, #8
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	3304      	adds	r3, #4
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	2200      	movs	r2, #0
 8004256:	4619      	mov	r1, r3
 8004258:	f7fc ff4d 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[3], LED1_Pin[3], RESET);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	330c      	adds	r3, #12
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3306      	adds	r3, #6
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	2200      	movs	r2, #0
 800426a:	4619      	mov	r1, r3
 800426c:	f7fc ff43 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[4], LED1_Pin[4], RESET);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3310      	adds	r3, #16
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	3308      	adds	r3, #8
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	2200      	movs	r2, #0
 800427e:	4619      	mov	r1, r3
 8004280:	f7fc ff39 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[5], LED1_Pin[5], RESET);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3314      	adds	r3, #20
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	330a      	adds	r3, #10
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	2200      	movs	r2, #0
 8004292:	4619      	mov	r1, r3
 8004294:	f7fc ff2f 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[6], LED1_Pin[6], RESET);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3318      	adds	r3, #24
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	330c      	adds	r3, #12
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	2200      	movs	r2, #0
 80042a6:	4619      	mov	r1, r3
 80042a8:	f7fc ff25 	bl	80010f6 <HAL_GPIO_WritePin>
            break;
 80042ac:	e113      	b.n	80044d6 <DISPLAY_LED_7_SEGMENT_PREMIUM+0x632>
        case 7:
            HAL_GPIO_WritePin(GPIOx1[0], LED1_Pin[0], RESET);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	2200      	movs	r2, #0
 80042b8:	4619      	mov	r1, r3
 80042ba:	f7fc ff1c 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[1], LED1_Pin[1], RESET);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3304      	adds	r3, #4
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	3302      	adds	r3, #2
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	2200      	movs	r2, #0
 80042cc:	4619      	mov	r1, r3
 80042ce:	f7fc ff12 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[2], LED1_Pin[2], RESET);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3308      	adds	r3, #8
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	3304      	adds	r3, #4
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	4619      	mov	r1, r3
 80042e2:	f7fc ff08 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[3], LED1_Pin[3], SET);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	330c      	adds	r3, #12
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	3306      	adds	r3, #6
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	2201      	movs	r2, #1
 80042f4:	4619      	mov	r1, r3
 80042f6:	f7fc fefe 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[4], LED1_Pin[4], SET);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3310      	adds	r3, #16
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	3308      	adds	r3, #8
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	2201      	movs	r2, #1
 8004308:	4619      	mov	r1, r3
 800430a:	f7fc fef4 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[5], LED1_Pin[5], SET);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3314      	adds	r3, #20
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	330a      	adds	r3, #10
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	2201      	movs	r2, #1
 800431c:	4619      	mov	r1, r3
 800431e:	f7fc feea 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[6], LED1_Pin[6], SET);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3318      	adds	r3, #24
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	330c      	adds	r3, #12
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	2201      	movs	r2, #1
 8004330:	4619      	mov	r1, r3
 8004332:	f7fc fee0 	bl	80010f6 <HAL_GPIO_WritePin>
            break;
 8004336:	e0ce      	b.n	80044d6 <DISPLAY_LED_7_SEGMENT_PREMIUM+0x632>
        case 8:
            HAL_GPIO_WritePin(GPIOx1[0], LED1_Pin[0], RESET);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	2200      	movs	r2, #0
 8004342:	4619      	mov	r1, r3
 8004344:	f7fc fed7 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[1], LED1_Pin[1], RESET);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3304      	adds	r3, #4
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	3302      	adds	r3, #2
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	2200      	movs	r2, #0
 8004356:	4619      	mov	r1, r3
 8004358:	f7fc fecd 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[2], LED1_Pin[2], RESET);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3308      	adds	r3, #8
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	3304      	adds	r3, #4
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	2200      	movs	r2, #0
 800436a:	4619      	mov	r1, r3
 800436c:	f7fc fec3 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[3], LED1_Pin[3], RESET);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	330c      	adds	r3, #12
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	3306      	adds	r3, #6
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	2200      	movs	r2, #0
 800437e:	4619      	mov	r1, r3
 8004380:	f7fc feb9 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[4], LED1_Pin[4], RESET);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3310      	adds	r3, #16
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	3308      	adds	r3, #8
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	2200      	movs	r2, #0
 8004392:	4619      	mov	r1, r3
 8004394:	f7fc feaf 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[5], LED1_Pin[5], RESET);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3314      	adds	r3, #20
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	330a      	adds	r3, #10
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	2200      	movs	r2, #0
 80043a6:	4619      	mov	r1, r3
 80043a8:	f7fc fea5 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[6], LED1_Pin[6], RESET);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3318      	adds	r3, #24
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	330c      	adds	r3, #12
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	2200      	movs	r2, #0
 80043ba:	4619      	mov	r1, r3
 80043bc:	f7fc fe9b 	bl	80010f6 <HAL_GPIO_WritePin>
            break;
 80043c0:	e089      	b.n	80044d6 <DISPLAY_LED_7_SEGMENT_PREMIUM+0x632>
        case 9:
            HAL_GPIO_WritePin(GPIOx1[0], LED1_Pin[0], RESET);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	4619      	mov	r1, r3
 80043ce:	f7fc fe92 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[1], LED1_Pin[1], RESET);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3304      	adds	r3, #4
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	3302      	adds	r3, #2
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	4619      	mov	r1, r3
 80043e2:	f7fc fe88 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[2], LED1_Pin[2], RESET);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3308      	adds	r3, #8
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	3304      	adds	r3, #4
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	4619      	mov	r1, r3
 80043f6:	f7fc fe7e 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[3], LED1_Pin[3], RESET);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	330c      	adds	r3, #12
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	3306      	adds	r3, #6
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	4619      	mov	r1, r3
 800440a:	f7fc fe74 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[4], LED1_Pin[4], SET);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3310      	adds	r3, #16
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	3308      	adds	r3, #8
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	2201      	movs	r2, #1
 800441c:	4619      	mov	r1, r3
 800441e:	f7fc fe6a 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[5], LED1_Pin[5], RESET);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3314      	adds	r3, #20
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	330a      	adds	r3, #10
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	2200      	movs	r2, #0
 8004430:	4619      	mov	r1, r3
 8004432:	f7fc fe60 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[6], LED1_Pin[6], RESET);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3318      	adds	r3, #24
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	330c      	adds	r3, #12
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	2200      	movs	r2, #0
 8004444:	4619      	mov	r1, r3
 8004446:	f7fc fe56 	bl	80010f6 <HAL_GPIO_WritePin>
            break;
 800444a:	e044      	b.n	80044d6 <DISPLAY_LED_7_SEGMENT_PREMIUM+0x632>
        default:
            HAL_GPIO_WritePin(GPIOx1[0], LED1_Pin[0], SET);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	2201      	movs	r2, #1
 8004456:	4619      	mov	r1, r3
 8004458:	f7fc fe4d 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[1], LED1_Pin[1], SET);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3304      	adds	r3, #4
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	3302      	adds	r3, #2
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	2201      	movs	r2, #1
 800446a:	4619      	mov	r1, r3
 800446c:	f7fc fe43 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[2], LED1_Pin[2], SET);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3308      	adds	r3, #8
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	3304      	adds	r3, #4
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	2201      	movs	r2, #1
 800447e:	4619      	mov	r1, r3
 8004480:	f7fc fe39 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[3], LED1_Pin[3], SET);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	330c      	adds	r3, #12
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	3306      	adds	r3, #6
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	2201      	movs	r2, #1
 8004492:	4619      	mov	r1, r3
 8004494:	f7fc fe2f 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[4], LED1_Pin[4], SET);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3310      	adds	r3, #16
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	3308      	adds	r3, #8
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	2201      	movs	r2, #1
 80044a6:	4619      	mov	r1, r3
 80044a8:	f7fc fe25 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[5], LED1_Pin[5], SET);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3314      	adds	r3, #20
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	330a      	adds	r3, #10
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	2201      	movs	r2, #1
 80044ba:	4619      	mov	r1, r3
 80044bc:	f7fc fe1b 	bl	80010f6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1[6], LED1_Pin[6], SET);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3318      	adds	r3, #24
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	330c      	adds	r3, #12
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	2201      	movs	r2, #1
 80044ce:	4619      	mov	r1, r3
 80044d0:	f7fc fe11 	bl	80010f6 <HAL_GPIO_WritePin>
            break;
 80044d4:	bf00      	nop
    }
}
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop

080044e0 <HAL_I2C_ListenCpltCallback>:

	#include "i2c_slave.h"

	#define RxSize 6
	uint8_t Rxdata[RxSize];
	void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
		HAL_I2C_EnableListen_IT(hi2c);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7fc ffe7 	bl	80014bc <HAL_I2C_EnableListen_IT>
	}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <HAL_I2C_AddrCallback>:
	void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	70fb      	strb	r3, [r7, #3]
 8004504:	4613      	mov	r3, r2
 8004506:	803b      	strh	r3, [r7, #0]
		if(TransferDirection == I2C_DIRECTION_TRANSMIT){
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d106      	bne.n	800451c <HAL_I2C_AddrCallback+0x24>
			HAL_I2C_Slave_Seq_Receive_IT( hi2c, Rxdata, RxSize,I2C_FIRST_AND_LAST_FRAME);
 800450e:	2308      	movs	r3, #8
 8004510:	2206      	movs	r2, #6
 8004512:	4905      	ldr	r1, [pc, #20]	; (8004528 <HAL_I2C_AddrCallback+0x30>)
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fc ff5f 	bl	80013d8 <HAL_I2C_Slave_Seq_Receive_IT>
		}
		else{
			Error_Handler();
		}
	}
 800451a:	e001      	b.n	8004520 <HAL_I2C_AddrCallback+0x28>
			Error_Handler();
 800451c:	f7fb ff90 	bl	8000440 <Error_Handler>
	}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000160 	.word	0x20000160

0800452c <HAL_I2C_SlaveRxCpltCallback>:
	void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

	}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <HAL_I2C_ErrorCallback>:
	void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
		HAL_I2C_EnableListen_IT(hi2c);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc ffb8 	bl	80014bc <HAL_I2C_EnableListen_IT>
	}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <button_reading>:
static GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer4[N0_OF_BUTTONS];
static uint8_t flagForButtonPress[N0_OF_BUTTONS]; // flag for button pressed (AN) hon 1 giay
static uint8_t flagForButton_longPress[N0_OF_BUTTONS];
int time_out_input = 500;
void button_reading ( GPIO_TypeDef* GPIOx[] , uint16_t GPIO_Pin[] ) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
	for (int i = 0 ; i< N0_OF_BUTTONS ; i ++ ){
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e077      	b.n	8004654 <button_reading+0x100>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8004564:	4a3f      	ldr	r2, [pc, #252]	; (8004664 <button_reading+0x110>)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	7819      	ldrb	r1, [r3, #0]
 800456c:	4a3e      	ldr	r2, [pc, #248]	; (8004668 <button_reading+0x114>)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4413      	add	r3, r2
 8004572:	460a      	mov	r2, r1
 8004574:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8004576:	4a3d      	ldr	r2, [pc, #244]	; (800466c <button_reading+0x118>)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	7819      	ldrb	r1, [r3, #0]
 800457e:	4a39      	ldr	r2, [pc, #228]	; (8004664 <button_reading+0x110>)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	460a      	mov	r2, r1
 8004586:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOx[i], GPIO_Pin[i]);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	4413      	add	r3, r2
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	4413      	add	r3, r2
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	4619      	mov	r1, r3
 800459e:	f7fc fd93 	bl	80010c8 <HAL_GPIO_ReadPin>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4619      	mov	r1, r3
 80045a6:	4a31      	ldr	r2, [pc, #196]	; (800466c <button_reading+0x118>)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	460a      	mov	r2, r1
 80045ae:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer3[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer1[i]){
 80045b0:	4a2d      	ldr	r2, [pc, #180]	; (8004668 <button_reading+0x114>)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	781a      	ldrb	r2, [r3, #0]
 80045b8:	492a      	ldr	r1, [pc, #168]	; (8004664 <button_reading+0x110>)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	440b      	add	r3, r1
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d144      	bne.n	800464e <button_reading+0xfa>
 80045c4:	4a27      	ldr	r2, [pc, #156]	; (8004664 <button_reading+0x110>)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	781a      	ldrb	r2, [r3, #0]
 80045cc:	4927      	ldr	r1, [pc, #156]	; (800466c <button_reading+0x118>)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	440b      	add	r3, r1
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d13a      	bne.n	800464e <button_reading+0xfa>
			// Het Rung
			if(debounceButtonBuffer4[i]!=debounceButtonBuffer3[i]){
 80045d8:	4a25      	ldr	r2, [pc, #148]	; (8004670 <button_reading+0x11c>)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4413      	add	r3, r2
 80045de:	781a      	ldrb	r2, [r3, #0]
 80045e0:	4921      	ldr	r1, [pc, #132]	; (8004668 <button_reading+0x114>)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	440b      	add	r3, r1
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d018      	beq.n	800461e <button_reading+0xca>
				// Dong bo lai tin hieu
				debounceButtonBuffer4[i]=debounceButtonBuffer3[i];
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <button_reading+0x114>)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	7819      	ldrb	r1, [r3, #0]
 80045f4:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <button_reading+0x11c>)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	460a      	mov	r2, r1
 80045fc:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 80045fe:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <button_reading+0x11c>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d121      	bne.n	800464e <button_reading+0xfa>
					// Vua chuyen sang trang thai nhan
					flagForButtonPress[i] = 1;
 800460a:	4a1a      	ldr	r2, [pc, #104]	; (8004674 <button_reading+0x120>)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	2201      	movs	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]
					time_out_input = 500;
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <button_reading+0x124>)
 8004616:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e017      	b.n	800464e <button_reading+0xfa>
				}
			}
			else{
				// Dang trong qua trinh nhan de hoac nha
				time_out_input -- ;
 800461e:	4b16      	ldr	r3, [pc, #88]	; (8004678 <button_reading+0x124>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3b01      	subs	r3, #1
 8004624:	4a14      	ldr	r2, [pc, #80]	; (8004678 <button_reading+0x124>)
 8004626:	6013      	str	r3, [r2, #0]
				if(time_out_input <= 0 ){
 8004628:	4b13      	ldr	r3, [pc, #76]	; (8004678 <button_reading+0x124>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	dc0e      	bgt.n	800464e <button_reading+0xfa>
					// Nhan du 5s hoac tha 5s
					time_out_input = 500;
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <button_reading+0x124>)
 8004632:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004636:	601a      	str	r2, [r3, #0]
					if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8004638:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <button_reading+0x11c>)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d104      	bne.n	800464e <button_reading+0xfa>
						// Truong hop la nhan de
						flagForButton_longPress[i] = 1;
 8004644:	4a0d      	ldr	r2, [pc, #52]	; (800467c <button_reading+0x128>)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4413      	add	r3, r2
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i< N0_OF_BUTTONS ; i ++ ){
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3301      	adds	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b02      	cmp	r3, #2
 8004658:	dd84      	ble.n	8004564 <button_reading+0x10>
					}
				}
			}
		}
	}
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	200000a8 	.word	0x200000a8
 8004668:	200000ac 	.word	0x200000ac
 800466c:	200000a4 	.word	0x200000a4
 8004670:	200000b0 	.word	0x200000b0
 8004674:	200000b4 	.word	0x200000b4
 8004678:	20000080 	.word	0x20000080
 800467c:	200000b8 	.word	0x200000b8

08004680 <setTimer1>:
#include "software_timer.h"
	int time_cycle = 10;
	int timer1_counter[10];
	int timer1_flag[10];

	void setTimer1(int index,int duration){
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
		timer1_counter[index]=duration / time_cycle;
 800468a:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <setTimer1+0x30>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	fb92 f2f3 	sdiv	r2, r2, r3
 8004694:	4907      	ldr	r1, [pc, #28]	; (80046b4 <setTimer1+0x34>)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer1_flag[index] = 0;
 800469c:	4a06      	ldr	r2, [pc, #24]	; (80046b8 <setTimer1+0x38>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2100      	movs	r1, #0
 80046a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr
 80046b0:	20000084 	.word	0x20000084
 80046b4:	20000190 	.word	0x20000190
 80046b8:	20000168 	.word	0x20000168

080046bc <timerRun>:
	void SetTimerForTimerSet(int index,int duration,int timer_set){
		time_cycle = timer_set;
		setTimer1(index, duration);
	}
	void timerRun(){
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
		for (int i = 0 ; i <10 ; i++){
 80046c2:	2300      	movs	r3, #0
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	e01c      	b.n	8004702 <timerRun+0x46>
			if(timer1_counter[i] >  0 ){
 80046c8:	4a12      	ldr	r2, [pc, #72]	; (8004714 <timerRun+0x58>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	dd08      	ble.n	80046e6 <timerRun+0x2a>
					timer1_counter[i]--;
 80046d4:	4a0f      	ldr	r2, [pc, #60]	; (8004714 <timerRun+0x58>)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046dc:	1e5a      	subs	r2, r3, #1
 80046de:	490d      	ldr	r1, [pc, #52]	; (8004714 <timerRun+0x58>)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 }
			if(timer1_counter[i]<=0){
 80046e6:	4a0b      	ldr	r2, [pc, #44]	; (8004714 <timerRun+0x58>)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	dc04      	bgt.n	80046fc <timerRun+0x40>
					timer1_flag[i]=1;
 80046f2:	4a09      	ldr	r2, [pc, #36]	; (8004718 <timerRun+0x5c>)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2101      	movs	r1, #1
 80046f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0 ; i <10 ; i++){
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3301      	adds	r3, #1
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b09      	cmp	r3, #9
 8004706:	dddf      	ble.n	80046c8 <timerRun+0xc>
			}
		}


	}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr
 8004714:	20000190 	.word	0x20000190
 8004718:	20000168 	.word	0x20000168

0800471c <__libc_init_array>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	2600      	movs	r6, #0
 8004720:	4d0c      	ldr	r5, [pc, #48]	; (8004754 <__libc_init_array+0x38>)
 8004722:	4c0d      	ldr	r4, [pc, #52]	; (8004758 <__libc_init_array+0x3c>)
 8004724:	1b64      	subs	r4, r4, r5
 8004726:	10a4      	asrs	r4, r4, #2
 8004728:	42a6      	cmp	r6, r4
 800472a:	d109      	bne.n	8004740 <__libc_init_array+0x24>
 800472c:	f000 f822 	bl	8004774 <_init>
 8004730:	2600      	movs	r6, #0
 8004732:	4d0a      	ldr	r5, [pc, #40]	; (800475c <__libc_init_array+0x40>)
 8004734:	4c0a      	ldr	r4, [pc, #40]	; (8004760 <__libc_init_array+0x44>)
 8004736:	1b64      	subs	r4, r4, r5
 8004738:	10a4      	asrs	r4, r4, #2
 800473a:	42a6      	cmp	r6, r4
 800473c:	d105      	bne.n	800474a <__libc_init_array+0x2e>
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	f855 3b04 	ldr.w	r3, [r5], #4
 8004744:	4798      	blx	r3
 8004746:	3601      	adds	r6, #1
 8004748:	e7ee      	b.n	8004728 <__libc_init_array+0xc>
 800474a:	f855 3b04 	ldr.w	r3, [r5], #4
 800474e:	4798      	blx	r3
 8004750:	3601      	adds	r6, #1
 8004752:	e7f2      	b.n	800473a <__libc_init_array+0x1e>
 8004754:	080047b8 	.word	0x080047b8
 8004758:	080047b8 	.word	0x080047b8
 800475c:	080047b8 	.word	0x080047b8
 8004760:	080047bc 	.word	0x080047bc

08004764 <memset>:
 8004764:	4603      	mov	r3, r0
 8004766:	4402      	add	r2, r0
 8004768:	4293      	cmp	r3, r2
 800476a:	d100      	bne.n	800476e <memset+0xa>
 800476c:	4770      	bx	lr
 800476e:	f803 1b01 	strb.w	r1, [r3], #1
 8004772:	e7f9      	b.n	8004768 <memset+0x4>

08004774 <_init>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr

08004780 <_fini>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	bf00      	nop
 8004784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004786:	bc08      	pop	{r3}
 8004788:	469e      	mov	lr, r3
 800478a:	4770      	bx	lr
