/*
 * dht20.c
 *
 *  Created on: Oct 12, 2024
 *      Author: thuyh
 */
#include <dht20.h>

I2C_HandleTypeDef hi2c1;
#define Slave_address_dht20 0x38
typedef enum{
	INIT, CHECK_DHT20, READ_DATA,HANDLE
} DHT20_State;
DHT20_State state = INIT;

uint8_t read_register(uint16_t register_pointer){
	HAL_StatusTypeDef status = HAL_OK;
	uint8_t return_vaule = 0;
	status = I2C_Read(&hi2c1, Slave_address_dht20<<1, register_pointer, 1, &return_vaule, 1);
	if(status!=HAL_OK){
		Error_Handler();
	}
	return return_vaule;
}

uint8_t DHT20_ReadStatus(DHT20_t *dht20) {
    uint8_t status = 0;
    I2C_Receive(dht20->hi2c, Slave_address_dht20 << 1, &status, 1);
    HAL_Delay(1);
    return status;
}

uint8_t DHT20_ResetSensor(DHT20_t *dht20) {
    uint8_t count = 0;
    if ((DHT20_ReadStatus(dht20) & 0x18) != 0x18) {
        count++;
        if (DHT20_ResetRegister(dht20, 0x1B)) count++;
        if (DHT20_ResetRegister(dht20, 0x1C)) count++;
        if (DHT20_ResetRegister(dht20, 0x1E)) count++;
        HAL_Delay(10);
    }

    return count;
}

uint8_t DHT20_ResetRegister(DHT20_t *dht20, uint8_t reg) {
    uint8_t value[3] = {0};


    if (I2C_Transmit(dht20->hi2c, Slave_address_dht20 << 1, &reg, 1) != HAL_OK) {
        return 0;
    }
    HAL_Delay(5);


    if (I2C_Receive(dht20->hi2c, Slave_address_dht20 << 1, value, 3) != HAL_OK) {
        return 0;
    }
    HAL_Delay(10);


    uint8_t buffer[3] = {0xB0 | reg, value[1], value[2]};
    if (I2C_Transmit(dht20->hi2c, Slave_address_dht20 << 1, buffer, 3) != HAL_OK) {
        return 0;
    }
    HAL_Delay(5);

    return 1;
}
